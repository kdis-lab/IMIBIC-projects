library(caret)
library(caret)
fileT <- "datos"
dataset <- read.csv(paste0(fileT, ".csv"), na.strings = "", row.names = 1)
View(dataset)
library(caret)
fileT <- "datos"
dataset <- read.csv(paste0(fileT, ".csv"), na.strings = "", row.names = 1)
View(dataset)
methods <- c("zv", "nzv", "center","scale","YeoJohnson")
preProcValues <- preProcess(dataset, method = methods)
datasetTransformed <- predict(preProcValues, dataset)
#detecting inconsistent or dupplicated examples
datasetTransformed <- datasetTransformed[!duplicated(datasetTransformed[,1:(ncol(datasetTransformed)-1)]),]
write.table(datasetTransformed, file= paste(fileT, "-preproc.csv",sep = ""),
quote = FALSE, sep="," , row.names = TRUE, col.names = TRUE, na = "")
library(FSelector)
library(caret)
?createMultiFolds
mydata <- read.csv(paste("datos-preproc",".csv",sep = ""), sep = ",", row.names = 1)
folds <- nrow(mydata)
ntimes <- 1
multiIndexes <- createMultiFolds(y = mydata[, ncol(mydata)], k = folds, times = ntimes)
multiIndexes[[1]]
multiIndexes[[2]]
multiIndexes
library(caret)
library(doMC)
threshold <- 0.75
output <- "results/"
datasets <- c("datos-preproc")
algorithms <- c("rf", "glm",
"C5.0", "C5.0Cost", "rpartCost", "svmLinearWeights2", "svmLinearWeights"
)
tuneLenght <-c(rf=30, C5.0 = 5, C5.0Cost= 5, rpartCost = 5, svmLinearWeights2 = 5, svmLinearWeights = 5)
fileName <- datasets[1]
#load the dataset and ranking of features
dataset <-  read.csv(paste(fileName,".csv",sep = ""), sep = ",", row.names = 1)
View(dataset)
rankingFeature <- read.csv(paste(output,fileName,"-sortedfeatures.csv", sep = ""), sep = "\t")
View(rankingFeature)
nFeatures <- nrow(rankingFeature)
classIndex <- ncol(dataset)
numberClasses <- length(levels(dataset[,ncol(dataset)]))
set.seed(123)
form <- as.formula("Class ~ .")
View(dataset)
?trainControl
fitControl <- trainControl(method="LOOCV", classProbs = TRUE,
savePredictions = TRUE, allowParallel= TRUE,
summaryFunction = twoClassSummary, verboseIter = FALSE)
algorithm <- "rf"
outputTemp <- paste0(output, algorithm, "/", fileName,"/")
if(!dir.exists(outputTemp)){
dir.create(outputTemp, recursive = TRUE)
}
#The dataframe where we stored the results for this algorithm
df <- data.frame(ID = c(0), NumberAtts=c(0), Atts=c(" "), metricOpt=c(0))
df <- df[-1,]
nFeatures
feature <- 1
pivotFeature <- rankingFeature[feature,"Index"]
listFeatures <- c(pivotFeature)
aucGlobal <- -1
otherFeature <- feature
# The last case
if(otherFeature != feature)
{
listFeatures <- c(listFeatures, rankingFeature[otherFeature,"Index"])
}
#extract the subset
subdataset <- dataset[, c(listFeatures, classIndex)]
View(subdataset)
if(algorithm == "glm"){
modelFit <- train(form, data = subdataset,
method=algorithm,
metric = metricOpt,
maximize = TRUE,
tuneLength = 30,
trControl = fitControl, family="binomial")
}
else{
modelFit <- train(form, data = subdataset,
method=algorithm,
metric = metricOpt,
maximize = TRUE,
tuneLength = tuneLenght[[algorithm]],
trControl = fitControl)
}
if(algorithm == "glm"){
modelFit <- train(form, data = subdataset,
method=algorithm,
metric = metricOpt,
maximize = TRUE,
tuneLength = 30,
trControl = fitControl, family="binomial")
}
else{
modelFit <- train(form, data = subdataset,
method=algorithm,
metric = metricOpt,
maximize = TRUE,
tuneLength = tuneLenght[[algorithm]],
trControl = fitControl)
}
metricOpt <- "ROC"
if(algorithm == "glm"){
modelFit <- train(form, data = subdataset,
method=algorithm,
metric = metricOpt,
maximize = TRUE,
tuneLength = 30,
trControl = fitControl, family="binomial")
}
else{
modelFit <- train(form, data = subdataset,
method=algorithm,
metric = metricOpt,
maximize = TRUE,
tuneLength = tuneLenght[[algorithm]],
trControl = fitControl)
}
modelFit <- train(form, data = subdataset,
method=algorithm,
metric = metricOpt,
maximize = TRUE,
tuneLength = tuneLenght[[algorithm]],
trControl = fitControl)
modelFit
modelFit$results
modelFit$results
modelFit$pred
modelFit$bestTune
modelFit$results
library(caret)
library(doMC)
threshold <- 0.8
output <- "results/"
datasets <- c("datos-preproc")
tuneLenght <-c(rf=30, C5.0 = 5, C5.0Cost= 5)
metricOpt <- "ROC"
#load the dataset and ranking of features
dataset <-  read.csv(paste(fileName,".csv",sep = ""), sep = ",", row.names = 1)
dataset <-  read.csv(paste("datos-preproc",".csv",sep = ""), sep = ",", row.names = 1)
fitControl <- trainControl(method="LOOCV", classProbs = TRUE,
savePredictions = TRUE, allowParallel= TRUE,
summaryFunction = twoClassSummary, verboseIter = FALSE)
modelFit <- train(form, data = subdataset,
method=algorithm,
metric = metricOpt,
maximize = TRUE,
tuneLength = tuneLenght[[algorithm]],
trControl = fitControl)
modelFit <- train("Class ~ .", data = subdataset,
method=algorithm,
metric = metricOpt,
maximize = TRUE,
tuneLength = tuneLenght[[algorithm]],
trControl = fitControl)
modelFit <- train("Class ~ .", data = dataset,
method=algorithm,
metric = metricOpt,
maximize = TRUE,
tuneLength = tuneLenght[[algorithm]],
trControl = fitControl)
modelFit <- train("Class ~ .", data = dataset,
method=algorithm,
metric = metricOpt,
maximize = TRUE,
tuneLength = tuneLenght[[algorithm]],
trControl = fitControl)
modelFit <- train(as.formula("Class ~ ."), data = dataset,
method=algorithm,
metric = metricOpt,
maximize = TRUE,
tuneLength = tuneLenght[[algorithm]],
trControl = fitControl)
Â¨dwknfkdmg
clear
aaa
modelFit <- train(as.formula("Class ~ ."), data = dataset,
method="rf",
metric = metricOpt,
maximize = TRUE,
tuneLength = tuneLenght[["rf"]],
trControl = fitControl)
modelFit
modelFit$results
modelFit$finalModel
modelFit$finalModel$votes
modelFit$finalModel$importance
subsets <- read.csv("results/rf/datos-preproc/rf.csv", sep = ",")
View(subsets)
subsets <- read.csv("results/rf/datos-preproc/rf.csv", sep = ",", row.names = 1)
View(subsets)
subsetsT<- subsets[subsets$ROC > 0.9 & subsets$Sens > 0.9, & subsets$Spec > 0.9]
subsetsT<- subsets[subsets$ROC > 0.9 & subsets$Sens > 0.9 & subsets$Spec > 0.9, ]
View(subsetsT)
subsetsT<- subsets[subsets$ROC ==1 & subsets$Sens > ==1 & subsets$Spec ==1, ]
subsetsT<- subsets[subsets$ROC== 1 & subsets$Sens > ==1 & subsets$Spec ==1, ]
subsetsT<- subsets[subsets$ROC== 1 & subsets$Sens==1 & subsets$Spec ==1, ]
View(subsetsT)
29/7
29/4
217+220
