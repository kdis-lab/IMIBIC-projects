cat("Los transcripts est치n en un orden diferente entre ficheros", "\n")
cat("Suma ",suma, "\n")
cat("Suma ",length(tname), "\n")
}
#cat(length(unique(transcript)))
#cat("\n")
#cat(length(transcript))
#cat("\n")
}
data.frame(c)
data.frame(samples)
data <- data.frame()
data <- data.frame()
data[samples[1]] <- file$TPM
data <- data.frame()
data <- cbind(data, samples[1]=file$TPM)
samples[1]
data <- cbind(data, "Oscar"=file$TPM)
?cbind
data <- data.frame(c(0))
data <- cbind(data, "Oscar"=file$TPM)
View(data)
unlist(samples)
class(unlist(samples))
class(samples)
data <- data.frame(list(samples))
View(data)
data <- data.frame(unlist(list(samples)))
View(data)
cName <- samples[1]
data <- data.frame(cName = file$TPM)
View(data)
samples <-c("CTRL-1", "CTRL-2", "CTRL-3", "KD-1", "KD-2", "KD-3")
fileName <- paste0("/media/ogreyesp/HDD500Gb/RNA-seq/data/samples/", samples[1], "/salmon/quant.sf")
file <- read.csv(file=fileName, sep = "\t")
tname <- file$Name
ntranscripts <- length(file)
if(sum(duplicated(tname))>0)
cat("Hay transcripts duplicados")
data <- data.frame(file$TPM)
for(s in 2:length(samples))
{
fileName <- paste0("/media/ogreyesp/HDD500Gb/RNA-seq/data/samples/", samples[s], "/salmon/quant.sf")
fileT <- read.csv(file=fileName, sep = "\t")
tnameT <- fileT$Name
if(!ntranscripts==length(fileT))
cat("El numero de transcript entre samples es diferente")
# Compare
suma <- sum(tname == tnameT)
if(sum(duplicated(tnameT))>0)
cat("Hay transcripts duplicados")
if(! suma== length(tname)){
cat("Los transcripts est치n en un orden diferente entre ficheros", "\n")
cat("Suma ",suma, "\n")
cat("Suma ",length(tname), "\n")
}
# If everything is ok
data <- cbind(data, fileT$TPM)
}
colnames(data) <- samples
View(data)
samples <-c("CTRL-1", "CTRL-2", "CTRL-3", "KD-1", "KD-2", "KD-3")
fileName <- paste0("/media/ogreyesp/HDD500Gb/RNA-seq/data/samples/", samples[1], "/salmon/quant.sf")
file <- read.csv(file=fileName, sep = "\t")
tname <- file$Name
ntranscripts <- length(file)
if(sum(duplicated(tname))>0)
cat("Hay transcripts duplicados")
data <- data.frame(file$TPM)
for(s in 2:length(samples))
{
fileName <- paste0("/media/ogreyesp/HDD500Gb/RNA-seq/data/samples/", samples[s], "/salmon/quant.sf")
fileT <- read.csv(file=fileName, sep = "\t")
tnameT <- fileT$Name
if(!ntranscripts==length(fileT))
cat("El numero de transcript entre samples es diferente")
# Compare
suma <- sum(tname == tnameT)
if(sum(duplicated(tnameT))>0)
cat("Hay transcripts duplicados")
if(! suma== length(tname)){
cat("Los transcripts est치n en un orden diferente entre ficheros", "\n")
cat("Suma ",suma, "\n")
cat("Suma ",length(tname), "\n")
}
# If everything is ok
data <- cbind(data, fileT$TPM)
}
colnames(data) <- samples
rownames(data) <- tname
write.table(data, file=paste0("/media/ogreyesp/HDD500Gb/RNA-seq/data/iso-tpm.csv"), quote=FALSE, row.names=TRUE,col.names=TRUE,sep="\t")
View(data)
file <- read.csv( "/media/ogreyesp/HDD500Gb/RNA-seq/data/suppa_isoform.psi", header = TRUE)
View(file)
file <- read.csv( "/media/ogreyesp/HDD500Gb/RNA-seq/data/suppa_isoform.psi", header = TRUE, sep = "\t")
View(file)
condition1 <-c("CTRL-1", "CTRL-2", "CTRL-3")
condition2 <- c("KD-1", "KD-2", "KD-3")
file <- read.csv( "/media/ogreyesp/HDD500Gb/RNA-seq/data/suppa_isoform.psi", header = TRUE, sep = "\t")
write.table(file[,condition1], file="/media/ogreyesp/HDD500Gb/RNA-seq/data/suppa_isoform-CTRL.psi", quote = FALSE, row.names = TRUE, col.names = TRUE)
write.table(file[,condition2], file="/media/ogreyesp/HDD500Gb/RNA-seq/data/suppa_isoform-KD.psi", quote = FALSE, row.names = TRUE, col.names = TRUE)
file
file[,condition1]
condition1 <-c("CTRL.1", "CTRL.2", "CTRL.3")
condition2 <- c("KD.1", "KD.2", "KD.3")
file <- read.csv( "/media/ogreyesp/HDD500Gb/RNA-seq/data/suppa_isoform.psi", header = TRUE, sep = "\t")
write.table(file[,condition1], file="/media/ogreyesp/HDD500Gb/RNA-seq/data/suppa_isoform-CTRL.psi", quote = FALSE, row.names = TRUE, col.names = TRUE)
write.table(file[,condition2], file="/media/ogreyesp/HDD500Gb/RNA-seq/data/suppa_isoform-KD.psi", quote = FALSE, row.names = TRUE, col.names = TRUE)
condition1 <-c("CTRL1", "CTRL2", "CTRL3")
condition2 <- c("KD1", "KD2", "KD3")
file <- read.csv( "/media/ogreyesp/HDD500Gb/RNA-seq/data/iso-tpm.csv", header = TRUE, sep = "\t")
file <- read.csv( "/media/ogreyesp/HDD500Gb/RNA-seq/data/iso-tpm.csv", header = TRUE, sep = "\t")
condition1 <-c("CTRL1", "CTRL2", "CTRL3")
condition2 <- c("KD1", "KD2", "KD3")
file <- read.csv( "/media/ogreyesp/HDD500Gb/RNA-seq/data/iso-tpm.csv", header = TRUE, sep = "\t")
file <- read.csv( "/media/ogreyesp/HDD500Gb/RNA-seq/data/iso-tpm.csv", header = TRUE, sep = "\t")
file <- read.csv( "/media/ogreyesp/HDD500Gb/RNA-seq/data/iso-tpm.csv", header = TRUE, sep = "\t")
file <- read.csv( "/media/ogreyesp/HDD500Gb/RNA-seq/data/iso-tpm.csv", header = TRUE, sep = "\t", row.names = 0)
condition1 <-c("CTRL1", "CTRL2", "CTRL3")
condition2 <- c("KD1", "KD2", "KD3")
file <- read.csv("/media/ogreyesp/HDD500Gb/RNA-seq/data/iso-tpm.csv", sep = "\t")
file <- read.csv("/media/ogreyesp/HDD500Gb/RNA-seq/data/iso-tpm.csv")
View(file)
file <- read.csv("/media/ogreyesp/HDD500Gb/RNA-seq/data/iso-tpm.csv", sep = "\t")
condition1 <-c("CTRL1", "CTRL2", "CTRL3")
condition2 <- c("KD1", "KD2", "KD3")
file <- read.csv("/media/ogreyesp/HDD500Gb/RNA-seq/data/iso-tpm.csv", sep="\t")
file <- read.csv("/media/ogreyesp/HDD500Gb/RNA-seq/data/iso-tpm.csv", sep="\t")
samples <-c("CTRL-1", "CTRL-2", "CTRL-3", "KD-1", "KD-2", "KD-3")
fileName <- paste0("/media/ogreyesp/HDD500Gb/RNA-seq/data/samples/", samples[1], "/salmon/quant.sf")
file <- read.csv(file=fileName, sep = "\t")
tname <- file$Name
ntranscripts <- length(file)
if(sum(duplicated(tname))>0)
cat("Hay transcripts duplicados")
data <- data.frame(file$TPM)
for(s in 2:length(samples))
{
fileName <- paste0("/media/ogreyesp/HDD500Gb/RNA-seq/data/samples/", samples[s], "/salmon/quant.sf")
fileT <- read.csv(file=fileName, sep = "\t")
tnameT <- fileT$Name
if(!ntranscripts==length(fileT))
cat("El numero de transcript entre samples es diferente")
# Compare
suma <- sum(tname == tnameT)
if(sum(duplicated(tnameT))>0)
cat("Hay transcripts duplicados")
if(! suma== length(tname)){
cat("Los transcripts est치n en un orden diferente entre ficheros", "\n")
cat("Suma ",suma, "\n")
cat("Suma ",length(tname), "\n")
}
# If everything is ok
data <- cbind(data, fileT$TPM)
}
colnames(data) <- samples
rownames(data) <- tname
write.table(data, file=paste0("/media/ogreyesp/HDD500Gb/RNA-seq/data/iso-tpm.csv"), quote=FALSE, row.names=TRUE,col.names=TRUE,sep="\t")
file <- read.csv("/media/ogreyesp/HDD500Gb/RNA-seq/data/iso-tpm.csv", sep="\t")
View(file)
condition1 <-c("CTRL1", "CTRL2", "CTRL3")
condition2 <- c("KD1", "KD2", "KD3")
file <- read.csv("/media/ogreyesp/HDD500Gb/RNA-seq/data/iso-tpm.csv", sep="\t")
View(file)
condition1 <-c("CTRL1", "CTRL2", "CTRL3")
condition2 <- c("KD1", "KD2", "KD3")
file <- read.csv("/media/ogreyesp/HDD500Gb/RNA-seq/data/iso-tpm.csv", sep="\t")
write.table(file[,condition1], file="/media/ogreyesp/HDD500Gb/RNA-seq/data/iso-CTRL.psi", quote = FALSE, row.names = TRUE, col.names = TRUE)
write.table(file[,condition2], file="/media/ogreyesp/HDD500Gb/RNA-seq/data/iso-KD.psi", quote = FALSE, row.names = TRUE, col.names = TRUE)
file <- read.csv("/media/ogreyesp/HDD500Gb/RNA-seq/data/iso-tpm.csv", sep="\t")
file <- read.csv("/media/ogreyesp/HDD500Gb/RNA-seq/data/iso-tpm.csv", sep="\t")
file <- read.csv("/media/ogreyesp/HDD500Gb/RNA-seq/data/suppa_diffSplice_iso.dpsi", sep="\t")
View(file)
file[-order(file$suppa_isoform.CTRL.suppa_isoform.KD_p.val),]
file[order(-file$suppa_isoform.CTRL.suppa_isoform.KD_p.val),]
file <- file[order(-file$suppa_isoform.CTRL.suppa_isoform.KD_p.val),]
View(file)
file <- file[order(file$suppa_isoform.CTRL.suppa_isoform.KD_p.val),]
View(file)
condition1 <-c("CTRL1", "CTRL2", "CTRL3")
condition2 <- c("KD1", "KD2", "KD3")
file <- read.csv("/media/ogreyesp/HDD500Gb/RNA-seq/data/suppa_events.psi", sep="\t")
write.table(file[,condition1], file="/media/ogreyesp/HDD500Gb/RNA-seq/data/suppa_events-CTRL.psi", quote = FALSE, row.names = TRUE, col.names = TRUE)
write.table(file[,condition2], file="/media/ogreyesp/HDD500Gb/RNA-seq/data/suppa_events-KD.psi", quote = FALSE, row.names = TRUE, col.names = TRUE)
file <- read.csv("/media/ogreyesp/HDD500Gb/RNA-seq/data/suppa_diffSplice_event.dpsi", sep="\t")
View(file)
file <- file[order(file$suppa_events.CTRL.suppa_events.KD_p.val),]
View(file)
file <- read.csv("/media/ogreyesp/HDD500Gb/RNA-seq/data/suppa_diffSplice_.dpsi", sep="\t")
file <- file[order(file$suppa_isoform.CTRL.suppa_isoform.KD_p.val),]
file <- read.csv("/media/ogreyesp/HDD500Gb/RNA-seq/data/suppa_diffSplice_.dpsi", sep="\t")
file <- read.csv("/media/ogreyesp/HDD500Gb/RNA-seq/data/suppa_diffSplice_iso.dpsi", sep="\t")
file <- file[order(file$suppa_isoform.CTRL.suppa_isoform.KD_p.val),]
View(file)
substr(rownames(file),1,3)
file[substr(rownames(file),1,3)=="Nov",]
file <- read.csv("/media/ogreyesp/HDD500Gb/RNA-seq/data/suppa_diffSplice_iso.dpsi", sep="\t")
file <- file[order(file$suppa_isoform.CTRL.suppa_isoform.KD_p.val),]
write.table(file, file="/media/ogreyesp/HDD500Gb/RNA-seq/data/diffSplice-iso.csv", quote = FALSE, row.names = TRUE, col.names = TRUE)
file <- read.csv("/media/ogreyesp/HDD500Gb/RNA-seq/data/suppa_diffSplice_event.dpsi", sep="\t")
file <- read.csv("/media/ogreyesp/HDD500Gb/RNA-seq/data/suppa_diffSplice_event.dpsi", sep="\t")
file <- file[order(file$suppa_events.CTRL.suppa_events.KD_p.val),]
write.table(file, file="/media/ogreyesp/HDD500Gb/RNA-seq/data/diffSplice-event.csv", quote = FALSE, row.names = TRUE, col.names = TRUE)
library(ggplot2)
data <- read.csv("/home/ogreyesp/Desktop/sortedfeatures.csv", sep = "\t")
data <- data[1:20,]
df <- data.frame(var = data$Var, imp=1-data$Importance)
p <- ggplot(df, aes(x = reorder(var, -imp), y = imp, fill=-imp)) + geom_bar(stat = "identity") +
scale_color_grey() + theme_classic() +
theme(axis.text.x=element_text(angle=90, hjust=1), legend.position="none")
p
library(ggplot2)
data <- read.csv("/home/ogreyesp/Desktop/sortedfeatures.csv", sep = "\t")
data <- data[1:20,]
df <- data.frame(var = data$Var, imp=1-data$Importance)
p <- ggplot(df, aes(x = reorder(var, -imp), y = imp, fill=-imp)) + geom_bar(stat = "identity") +
scale_color_grey() + theme_classic() +
theme(axis.text.x=element_text(angle=90, hjust=1), legend.position="none") + labs(x="Factores", y="Importancia")
p
library("factoextra")
install.packages("factoextra")
library("factoextra")
x <- iris[1:50, 1:4]
y <- iris[51:100, 1:4]
dcov(x, y)
install.packages("energy")
library(energy)
x <- iris[1:50, 1:4]
y <- iris[51:100, 1:4]
dcov(x, y)
x
dcov(x, y)
## C implementation
dcov(x, y, 1.5)
dcor(x, y, 1.5)
## R implementation
DCOR(x, y, 1.5)
?dcov
install.packages("hybridHclust")
library(hybridHclust)
set.seed(101)
x <- matrix(rnorm(500),5,100)
x <- rbind(x,x[rep(1,4),]+matrix(rnorm(400),4,100))
x <- rbind(x,x[2:5,]+matrix(rnorm(400),4,100))
x
par(mfrow=c(1,2))
image(1-cor(t(x)),main= 'correlation distances', zlim=c(0,2),col=gray(1:100/101))
e1 <- eisenCluster(x, 'correlation')
plot(e1)
x <- iris[1:50, 1:4]
y <- iris[51:100, 1:4]
dcov(x, y)
dcov(dist(x), dist(y))  #same thing
## C implementation
dcov(x, y, 1.5)
dcor(x, y, 1.5)
## R implementation
DCOR(x, y, 1.5)
install.packages("cba")
library(cba)
x <- matrix(sample(c(FALSE, TRUE), 200, rep=TRUE), ncol=10)
x
pr <- proximus(x, max.radius=8)
View(pr)
summary(pr)
### example from paper
x <- rlbmat()
x
pr <- proximus(x, max.radius=8, debug=TRUE)
op <- par(mfrow=c(1,2), pty="s")
lmplot(x, main="Data")
box()
lmplot(fitted(pr)$x, main="Approximation")
box()
par(op)
x <- matrix(sample(c(FALSE, TRUE), 200, rep=TRUE), ncol=10)
pr <- proximus(x, max.radius=8)
pr$a
?proximus
pr$nr
pr$nc
pr$a$x
pr$a
pr$a$y
pr$a
x
pr
x <- matrix(sample(c(FALSE, TRUE), 200, rep=TRUE), ncol=10)
pr <- proximus(x, max.radius=8)
pr
summary(pr)
### example from paper
x <- rlbmat()
pr <- proximus(x, max.radius=8, debug=TRUE)
summary(pr)
pr$a
x[c(61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80), ]
pr$a
x[c(61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80), c(37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52)]
pr$a
dataset<-read.csv(file = "/home/ogreyesp/Desktop/emotions.csv", sep = ",", header = F)
View(dataset)
dataset<-dataset[,c(73:78)]
as.logical(dataset)
matrix(dataset)
matrix(dataset)
?matrix
?proximus
?matrix
m<-matrix(nrow = 593, ncol = 6)
dataset
data.matrix(dataset)
proximus(data.matrix(dataset), max.radius = 8)
m<-data.matrix(dataset)
class(m)
apply(m, 2, as.logical)
m<-apply(m, 2, as.logical)
pr<-proximus(m, max.radius = 8)
pr
summary(pr)
pr<-proximus(m, max.radius = 5)
summary(pr)
pr<-proximus(m, max.radius = 20)
summary(pr)
pr<-proximus(m, max.radius = 8)
pr$a
m[c(1,4,6,10),3]
m[c(5,15,60,71,91), c(4,5)]
m[c(5,15,60,71,91,125,153,158,187,200,208,216,219,253,256,295,300,301,303), c(4,5)]
m[c(2,3,7,8,9,13,16,19,21,24,25,28,31,33,34,35,39,40,42),c(1,6)]
cor(m, method = c("pearson"))
x = c(1,  1,  0,  0,  1,  0,  1,  1,  1)
y = c(1,  1,  0,  0,  0,  0,  1,  1,  1)
cor(x,y)
sqrt(chisq.test(table(m[,1],m[2]), correct=FALSE)$statistic/length(593))
sqrt(chisq.test(table(m[,1],m[,2]), correct=FALSE)$statistic/length(593))
sqrt(chisq.test(table(m[,4],m[,5]), correct=FALSE)$statistic/length(593))
sqrt(chisq.test(table(m[,1],m[,6]), correct=FALSE)$statistic/length(593))
install.packages("GenomicRanges")
source("https://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("GenomicRanges")
library(GenomicRanges)
phicoef(m[,1], m[,6])
phicoef(m[,4], m[,5])
strsplit("73.21	196.01	112.86	162.06	230.58	8.84	0.00	62.35	0.00	0.00	0.00	8.09	0.00	152.11	0.00	0.00	0.00	0.00	148.10	0.00	186.63	0.00	0.00	12.92	0.00	0.00	0.00	0.00	0.00	0.00	80.13	0.00	23.17	0.00	0.00	0.00	0.00	0.00	0.00	122.11	0.00	11.09	0.00	0.00	0.00	0.00	90.32	0.00	0.00	0.00	0.00	77.47")
strsplit("73.21	196.01	112.86	162.06	230.58	8.84	0.00	62.35	0.00	0.00	0.00	8.09	0.00	152.11	0.00	0.00	0.00	0.00	148.10	0.00	186.63	0.00	0.00	12.92	0.00	0.00	0.00	0.00	0.00	0.00	80.13	0.00	23.17	0.00	0.00	0.00	0.00	0.00	0.00	122.11	0.00	11.09	0.00	0.00	0.00	0.00	90.32	0.00	0.00	0.00	0.00	77.47", sep="\t")
?strsplit
strsplit("73.21	196.01	112.86	162.06	230.58	8.84	0.00	62.35	0.00	0.00	0.00	8.09	0.00	152.11	0.00	0.00	0.00	0.00	148.10	0.00	186.63	0.00	0.00	12.92	0.00	0.00	0.00	0.00	0.00	0.00	80.13	0.00	23.17	0.00	0.00	0.00	0.00	0.00	0.00	122.11	0.00	11.09	0.00	0.00	0.00	0.00	90.32	0.00	0.00	0.00	0.00	77.47", split="\t")
unlist(strsplit("73.21	196.01	112.86	162.06	230.58	8.84	0.00	62.35	0.00	0.00	0.00	8.09	0.00	152.11	0.00	0.00	0.00	0.00	148.10	0.00	186.63	0.00	0.00	12.92	0.00	0.00	0.00	0.00	0.00	0.00	80.13	0.00	23.17	0.00	0.00	0.00	0.00	0.00	0.00	122.11	0.00	11.09	0.00	0.00	0.00	0.00	90.32	0.00	0.00	0.00	0.00	77.47", split="\t"))
sum(unlist(strsplit("73.21	196.01	112.86	162.06	230.58	8.84	0.00	62.35	0.00	0.00	0.00	8.09	0.00	152.11	0.00	0.00	0.00	0.00	148.10	0.00	186.63	0.00	0.00	12.92	0.00	0.00	0.00	0.00	0.00	0.00	80.13	0.00	23.17	0.00	0.00	0.00	0.00	0.00	0.00	122.11	0.00	11.09	0.00	0.00	0.00	0.00	90.32	0.00	0.00	0.00	0.00	77.47", split="\t")))
sum(as.numeric(unlist(strsplit("73.21	196.01	112.86	162.06	230.58	8.84	0.00	62.35	0.00	0.00	0.00	8.09	0.00	152.11	0.00	0.00	0.00	0.00	148.10	0.00	186.63	0.00	0.00	12.92	0.00	0.00	0.00	0.00	0.00	0.00	80.13	0.00	23.17	0.00	0.00	0.00	0.00	0.00	0.00	122.11	0.00	11.09	0.00	0.00	0.00	0.00	90.32	0.00	0.00	0.00	0.00	77.47", split="\t"))))
73.21/1758
73.21/1758
sum(as.numeric(unlist(strsplit("73.21	196.01	112.86	162.06	230.58	8.84	0.00	62.35	0.00	0.00	0.00	8.09	0.00	152.11	0.00	0.00	0.00	0.00	148.10	0.00	186.63	0.00	0.00	12.92	0.00	0.00	0.00	0.00	0.00	0.00	80.13	0.00	23.17	0.00	0.00	0.00	0.00	0.00	0.00	122.11	0.00	11.09	0.00	0.00	0.00	0.00	90.32	0.00	0.00	0.00	0.00	77.47", split="\t"))))
sum(as.numeric(unlist(strsplit("73.21	196.01	112.86	162.06	230.58	8.84	0.00	62.35	0.00	0.00	0.00	8.09	0.00	152.11	0.00	0.00	0.00	0.00	148.10	0.00	186.63	0.00	0.00	12.92	0.00	0.00	0.00	0.00	0.00	0.00	80.13	0.00	23.17	0.00	0.00	0.00	0.00	0.00	0.00	122.11	0.00	11.09	0.00	0.00	0.00	0.00	90.32	0.00	0.00	0.00	0.00	77.47", split="\t"))))
c<-as.numeric(unlist(strsplit("73.21	196.01	112.86	162.06	230.58	8.84	0.00	62.35	0.00	0.00	0.00	8.09	0.00	152.11	0.00	0.00	0.00	0.00	148.10	0.00	186.63	0.00	0.00	12.92	0.00	0.00	0.00	0.00	0.00	0.00	80.13	0.00	23.17	0.00	0.00	0.00	0.00	0.00	0.00	122.11	0.00	11.09	0.00	0.00	0.00	0.00	90.32	0.00	0.00	0.00	0.00	77.47", split="\t")))
sum(c)/length(c)
73.21/33.80865
remove(list = ls())
library(cba)
library(caret)
library(pROC)
library(doMC)
registerDoMC(cores = 2)
source("EvaluationMeasure.R")
nlabels <- c("emotions"=6)
nameDataset <- "emotions"
hammingMean <- c()
#For each random fold
for(fold in 1:5){
cat("Fold:",fold,"\n")
dataset <- read.csv(file = paste0("datasets/", nameDataset, "-train", fold,".csv"), sep = ",", header = F)
cols <- ncol(dataset)
nFeatures <- cols - nlabels[nameDataset]
#Converting the label columns in logical factors
dataset[, c((nFeatures+1):cols)] <- apply(dataset[, c((nFeatures+1):cols)], 2, as.logical)
#Executing the Proximus algorithms
labelSpace <- data.matrix(dataset[, c((nFeatures+1):cols)])
labelSpace <- apply(labelSpace, 2, as.logical)
# Compute the cardinality of the training set
cardinality <- mean(apply(labelSpace, 1, sum))
pr <- proximus(labelSpace, max.radius= ceiling(cardinality))
summary(pr)
summaryPatterns <- summary(pr)$pattern
numberCluster <- length(pr$a)
#Creating the new dataset for multi-class prediction
multiclassDataset <- dataset[ , c(1:nFeatures)]
multiclassDataset <- cbind(multiclassDataset, Class= rep("C1", nrow(multiclassDataset)))
levels(multiclassDataset$Class) <- paste0("C", c(1:numberCluster))
numberInstances <- nrow(multiclassDataset)
caseWeights <- rep(1, numberInstances)
for(c in 1:numberCluster){
#Creating class c
cat("Index:", c, " Labels:", pr$a[[c]]$y, " ", "instances:" , length(pr$a[[c]]$x), "\n")
multiclassDataset[pr$a[[c]]$x, "Class"] <- as.factor(paste0("C", c))
# Computing the case weights for handling imbalanced problems
caseWeights[pr$a[[c]]$x] <- numberInstances/(numberCluster* length(pr$a[[c]]$x))
}
# Using the new dataset as training set
fitControl <- trainControl(method="repeatedcv", number = 10, repeats = 1, classProbs = TRUE,
savePredictions = TRUE, allowParallel= TRUE,
summaryFunction = multiClassSummary, verboseIter = FALSE)
modelFit <- train(Class ~ ., data = multiclassDataset,
method="C5.0",  # implementation of random forest that supports case weights
metric = "AUC",
maximize = TRUE,
trControl = fitControl, tuneLength = 5, weights = caseWeights, preProcess = c("nzv","zv","center", "scale"))
# Proccess for the creation of binary classifiers
binaryClassifiers <- matrix(list(list()),  numberCluster, nlabels[nameDataset])
BinaryFitControl <- trainControl(method="repeatedcv", number = 10, repeats = 1, classProbs = TRUE,
savePredictions = TRUE, allowParallel= TRUE,
summaryFunction = twoClassSummary, verboseIter = FALSE)
for(indexCluster in 1:numberCluster){
if(summaryPatterns[indexCluster, "Radius"] > 0){
# subdataset with all labels in the cluster
subdataset <- dataset[pr$a[[indexCluster]]$x,]
# For each label
for(indexLabel in (nFeatures+1):(nFeatures+nlabels[nameDataset])){
values <- unique(subdataset[, indexLabel])
if(length(values) == 2){
# If there are two values, then train a classifier and predict with this classifier
binarySubdataset <- subdataset[, c(1:nFeatures, indexLabel)]
# Computing the case weights for handling imbalanced problems
numberBinaryInstances <- nrow(binarySubdataset)
trueInstances <- sum(binarySubdataset[, nFeatures+1])
negativeInstances <- numberBinaryInstances - trueInstances
binaryCaseWeights <- rep(1, numberBinaryInstances)
binaryCaseWeights[binarySubdataset[, nFeatures+1]==TRUE] <- numberBinaryInstances/(2 * trueInstances)
binaryCaseWeights[binarySubdataset[, nFeatures+1]==FALSE] <- numberBinaryInstances/(2 * negativeInstances)
#Converting the last column to factor. Los valores True y False no se pueden dejar porque dan error.
binarySubdataset[, nFeatures+1] <- as.factor(binarySubdataset[, nFeatures+1])
levels(binarySubdataset[, nFeatures+1]) <- make.names(levels(factor(binarySubdataset[, nFeatures+1])))
binaryClassifiers[indexCluster, indexLabel-nFeatures][[1]] <- train(as.formula(paste0(colnames(binarySubdataset)[nFeatures+1], "~ .")), data = binarySubdataset,
method="rf",  # implementation of random forest that supports case weights
metric = "ROC",
maximize = TRUE,
trControl = BinaryFitControl,
tuneLength = 5, weights = binaryCaseWeights, preProcess = c("nzv","zv","center", "scale"))
}
}
}
}
testDataset <-read.csv(file = paste0("datasets/", nameDataset, "-test", fold,".csv"), sep = ",", header = F)
testDataset[, c((nFeatures+1):cols)] <- apply(testDataset[, c((nFeatures+1):cols)], 2, as.logical)
predictorMultiClass <- predict(modelFit, newdata = testDataset[, c(1:nFeatures)], type = "raw")
#Initializing the predicted labels, all are putted to false.
predictedLabels <- testDataset[, c((nFeatures+1):cols)]
predictedLabels[,] <- FALSE
#See the predicted classes
predictedClasses <- unique(predictorMultiClass)
# For each predicted classes
for(pc in predictedClasses){
indexCluster <- as.numeric(substr(pc, 2, nchar(pc)))
indexfofInstances <- which(pc == predictorMultiClass)
#The prediction is the same as the cluster. Like a LPS does.
if(summaryPatterns[indexCluster, "Radius"] == 0){
predictedLabels[indexfofInstances, pr$a[[indexCluster]]$y] <- TRUE
} else{
subdatasetBinary <- testDataset[indexfofInstances, c(1:nFeatures)]
# For each label
for(cl in 1:nlabels[nameDataset]){
if(length(binaryClassifiers[indexCluster, cl][[1]]) == 0){
predictedLabels[indexfofInstances, cl] <- labelSpace[pr$a[[indexCluster]]$x[1], cl]
} else {
modelBinaryTemp <- binaryClassifiers[indexCluster, cl][[1]]
predTemp <- predict(modelBinaryTemp, newdata = subdatasetBinary, type = "raw")
predTemp <- as.logical(substr(predTemp, 1, nchar(as.character(predTemp))-1))
predictedLabels[indexfofInstances, cl] <- predTemp
}
}
}
}
# To check
apply(predictedLabels, 2, function(x) any(is.na(x)))
hamming <- hammingLoss(predLabels = predictedLabels, trueLabels = testDataset[, c((nFeatures+1):cols)])
cat(hamming, "\n")
hammingMean <- c(hammingMean, hamming)
remove(binaryClassifiers)
remove(dataset)
remove(multiclassDataset)
remove(testDataset)
remove(pr)
remove(summaryPatterns)
}
cat("avg. Hamming Loss:", mean(hammingMean))
library(caret)
path <- "results/Curve1/rf/sanos-enfermos/"
modelFit <- readRDS(paste0(path, "modelfit-rf.rds"))
library(caret)
path <- "results/Curve1/rf/sanos-enfermos/"
modelFit <- readRDS(paste0(path, "modelfit-rf.rds"))
getwd()
setwd("/media/ogreyesp/DATA/workspace/IMIBIC/datasets/steatosis/v3/")
library(caret)
path <- "results/Curve1/rf/sanos-enfermos/"
modelFit <- readRDS(paste0(path, "modelfit-rf.rds"))
modelFit$trainingData
library(caret)
path <- "results/Curve2/rf/sanos-enfermos/"
modelFit <- readRDS(paste0(path, "modelfit-rf.rds"))
predictions <- modelFit$pred[modelFit$pred$mtry == modelFit$bestTune$mtry,]
predictions <- predictions[, c("pred", "obs", "E", "S")]
write.csv(predictions, file = paste0(path, "CV-residuals-complete.csv"), row.names = FALSE, quote = FALSE)
modelFit$trainingData
library(caret)
path <- "results/Curve3/rf/sanos-enfermos/"
modelFit <- readRDS(paste0(path, "modelfit-rf.rds"))
predictions <- modelFit$pred[modelFit$pred$mtry == modelFit$bestTune$mtry,]
predictions <- predictions[, c("pred", "obs", "E", "S")]
write.csv(predictions, file = paste0(path, "CV-residuals-complete.csv"), row.names = FALSE, quote = FALSE)
modelFit$trainingData
