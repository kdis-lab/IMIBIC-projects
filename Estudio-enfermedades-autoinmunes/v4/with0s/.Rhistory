trControl = fitControl)
library(caret)
library(doMC)
registerDoMC(cores = 1)
data("iris")
set.seed(825)
# To create a stratified repeated k-fold cross validation
multiIndexes<-createMultiFolds(y=iris$Species, k = 10, times = 1)
fitControl <- trainControl(method="repeatedcv", number=10, repeats = 1, index = multiIndexes, classProbs=TRUE,
savePredictions = TRUE, search="grid", allowParallel= TRUE,
summaryFunction = multiClassSummary, verboseIter = FALSE)
# "xgbLinear", "xgbTree"
# methods that work ok: rf, AdaBoost.M1, "AdaBag", "bagFDA", "BstLm" , "C5.0", "cforest", ctree, gbm, glmnet, pam, rpart, RRF
#Error in { : task 1 failed - "'n' must be a positive integer >= 'x'"
# methods that fail: bagEarth, deepboost, glmboost, nodeHarvest, ordinalNet, rpartCost
# the packages have problem: bartMachine, extraTrees, JRip, J48, PART, LMT
#2: In train.default(x, y, weights = w, ...) :
#  The metric "AUC" was not in the result set. Accuracy will be used instead.
#methods not computing AUC: BstLm, bstSm, PenalizedLDA, wsrf, rFerns
#Error in { :
#   task 1 failed - "length of 'dimnames' [2] not equal to array extent"
#methods : ORFlog, ORFpls, ORFridge, ORFsvm
#execute the algorithm
modelFit <- train(Species ~ ., data = iris,
method= "sparseLDA",
metric = "AUC",
maximize = TRUE,
tuneLength = 2,
trControl = fitControl)
modelFit$method
modelFit
library(caret)
library(doMC)
registerDoMC(cores = 1)
data("iris")
set.seed(825)
# To create a stratified repeated k-fold cross validation
multiIndexes<-createMultiFolds(y=iris$Species, k = 10, times = 1)
fitControl <- trainControl(method="repeatedcv", number=10, repeats = 1, index = multiIndexes, classProbs=TRUE,
savePredictions = TRUE, search="grid", allowParallel= TRUE,
summaryFunction = multiClassSummary, verboseIter = FALSE)
# "xgbTree"
# methods that work ok: rf, AdaBoost.M1, "AdaBag", "bagFDA", "BstLm" , "C5.0", "cforest", ctree, gbm, glmnet, pam, rpart, RRF, sparseLDA
#Error in { : task 1 failed - "'n' must be a positive integer >= 'x'"
# methods that fail: bagEarth, deepboost, glmboost, nodeHarvest, ordinalNet, rpartCost
# the packages have problem: bartMachine, extraTrees, JRip, J48, PART, LMT
#2: In train.default(x, y, weights = w, ...) :
#  The metric "AUC" was not in the result set. Accuracy will be used instead.
#methods not computing AUC: BstLm, bstSm, PenalizedLDA, wsrf, rFerns
#Error in { :
#   task 1 failed - "length of 'dimnames' [2] not equal to array extent"
#methods : ORFlog, ORFpls, ORFridge, ORFsvm
#execute the algorithm
modelFit <- train(Species ~ ., data = iris,
method= "xgbLinear",
metric = "AUC",
maximize = TRUE,
tuneLength = 2,
trControl = fitControl)
modelFit$method
modelFit
library(caret)
library(doMC)
registerDoMC(cores = 1)
data("iris")
set.seed(825)
# To create a stratified repeated k-fold cross validation
multiIndexes<-createMultiFolds(y=iris$Species, k = 10, times = 1)
fitControl <- trainControl(method="repeatedcv", number=10, repeats = 1, index = multiIndexes, classProbs=TRUE,
savePredictions = TRUE, search="grid", allowParallel= TRUE,
summaryFunction = multiClassSummary, verboseIter = FALSE)
# methods that work ok: rf, AdaBoost.M1, "AdaBag", "bagFDA", "BstLm" , "C5.0", "cforest", ctree, gbm, glmnet, pam, rpart, RRF, sparseLDA, xgbLinear
#Error in { : task 1 failed - "'n' must be a positive integer >= 'x'"
# methods that fail: bagEarth, deepboost, glmboost, nodeHarvest, ordinalNet, rpartCost
# the packages have problem: bartMachine, extraTrees, JRip, J48, PART, LMT
#2: In train.default(x, y, weights = w, ...) :
#  The metric "AUC" was not in the result set. Accuracy will be used instead.
#methods not computing AUC: BstLm, bstSm, PenalizedLDA, wsrf, rFerns
#Error in { :
#   task 1 failed - "length of 'dimnames' [2] not equal to array extent"
#methods : ORFlog, ORFpls, ORFridge, ORFsvm
#execute the algorithm
modelFit <- train(Species ~ ., data = iris,
method= "xgbTree",
metric = "AUC",
maximize = TRUE,
tuneLength = 2,
trControl = fitControl)
modelFit
install.packages(pkgs = "rJava", repos="http://rforge.net", type = 'source')
install.packages("RWeka")
install.packages("bartMachine")
install.packages("extraTrees")
install.packages("extraTrees")
install.packages("extraTrees")
install.packages("extraTrees")
library(caret)
library(doMC)
registerDoMC(cores = 1)
data("iris")
set.seed(825)
# To create a stratified repeated k-fold cross validation
multiIndexes<-createMultiFolds(y=iris$Species, k = 10, times = 1)
fitControl <- trainControl(method="repeatedcv", number=10, repeats = 1, index = multiIndexes, classProbs=TRUE,
savePredictions = TRUE, search="grid", allowParallel= TRUE,
summaryFunction = multiClassSummary, verboseIter = FALSE)
# methods that work ok: rf, AdaBoost.M1, "AdaBag", "bagFDA", "BstLm" , "C5.0", "cforest", ctree, gbm, glmnet, pam, rpart, RRF, sparseLDA, xgbLinear, xgbTree
#Error in { : task 1 failed - "'n' must be a positive integer >= 'x'"
# methods that fail: bagEarth, deepboost, glmboost, nodeHarvest, ordinalNet, rpartCost
# the packages have problem: bartMachine, extraTrees, JRip, J48, PART, LMT
#2: In train.default(x, y, weights = w, ...) :
#  The metric "AUC" was not in the result set. Accuracy will be used instead.
#methods not computing AUC: BstLm, bstSm, PenalizedLDA, wsrf, rFerns
#Error in { :
#   task 1 failed - "length of 'dimnames' [2] not equal to array extent"
#methods : ORFlog, ORFpls, ORFridge, ORFsvm
#execute the algorithm
modelFit <- train(Species ~ ., data = iris,
method= "rf",
metric = "AUC",
maximize = TRUE,
tuneLength = 2,
trControl = fitControl)
sessionInfo()
install.packages(c("arules", "BH", "boot", "car", "caret", "crayon", "curl", "DBI", "dplyr", "evaluate", "foreign", "glmnet", "haven", "htmlwidgets", "httpuv", "httr", "knitr", "Matrix", "mgcv", "modelr", "multcomp", "openssl", "PKI", "psych", "purrr", "quantmod", "R6", "Rcpp", "repr", "reticulate", "rlang", "rmarkdown", "rsconnect", "rstudioapi", "scales", "shiny", "tensorflow", "tibble", "tidyr", "TTR", "xts"))
install.packages(c("arules", "BH", "boot", "car", "caret", "crayon", "curl", "DBI", "dplyr", "evaluate", "foreign", "glmnet", "haven", "htmlwidgets", "httpuv", "httr", "knitr", "Matrix", "mgcv", "modelr", "multcomp", "openssl", "PKI", "psych", "purrr", "quantmod", "R6", "Rcpp", "repr", "reticulate", "rlang", "rmarkdown", "rsconnect", "rstudioapi", "scales", "shiny", "tensorflow", "tibble", "tidyr", "TTR", "xts"))
install.packages(c("arules", "BH", "boot", "car", "caret", "crayon", "curl", "DBI", "dplyr", "evaluate", "foreign", "glmnet", "haven", "htmlwidgets", "httpuv", "httr", "knitr", "Matrix", "mgcv", "modelr", "multcomp", "openssl", "PKI", "psych", "purrr", "quantmod", "R6", "Rcpp", "repr", "reticulate", "rlang", "rmarkdown", "rsconnect", "rstudioapi", "scales", "shiny", "tensorflow", "tibble", "tidyr", "TTR", "xts"))
install.packages(c("Factoshiny","missMDA","FactoInvestigate"))
install.packages("factoextra")
library(FactoMineR)
library(FactoInvestigate)
remove.packages("FactoInvestigate")
library(FactoInvestigate)
install.packages("/home/oscar/Downloads/FactoInvestigate_1.1.tar.gz", source="type")
install.packages("/home/oscar/Downloads/FactoInvestigate_1.1.tar.gz", repos = NULL, type="source")
install.packages("Factoshiny")
library(tcltk)
install.packages("tcltk")
install.packages("tcltk")
install.packages("tcltk")
install.packages("Factoshiny")
options(menu.graphics=FALSE)
install.packages("Factoshiny")
devtools::install_github("rstudio/keras")
devtools::install_github("rstudio/keras")
install.packages("devtolls")
install.packages("devtools")
devtools::install_github("rstudio/keras")
devtools::install_github("rstudio/keras")
library(mlbench)
library(datasets)
dataset <- data(DNase)
data(DNase)
library(mlbench)
library(datasets)
data(DNase)
data("DNA")
View(DNA)
View(DNA)
data("Glass")
View(Glass)
View(Glass)
View(Glass)
View(Glass)
ggplot(Glass, aes(RI, Na, color = Type)) + geom_point()
library(ggplot2)
ggplot(Glass, aes(RI, Na, color = Type)) + geom_point()
install.packages(c("arules", "broom", "car", "checkmate", "cowplot", "curl", "data.table", "debugme", "deepboost", "dendextend", "devtools", "FactoMineR", "ggpubr", "ggrepel", "git2r", "glue", "gridSVG", "keras", "lazyeval", "lme4", "lubridate", "Matrix", "mda", "Metrics", "mice", "multcomp", "openssl", "PKI", "pryr", "purrr", "quantmod", "quantreg", "RcppEigen", "recipes", "reticulate", "rFerns", "rlang", "rmarkdown", "robustbase", "RWeka", "RWekajars", "stringi", "tensorflow", "tfruns", "tidyr", "tidyselect", "tidyverse", "timeDate", "withr"))
install.packages(c("arules", "broom", "car", "checkmate", "cowplot", "curl", "data.table", "debugme", "deepboost", "dendextend", "devtools", "FactoMineR", "ggpubr", "ggrepel", "git2r", "glue", "gridSVG", "keras", "lazyeval", "lme4", "lubridate", "Matrix", "mda", "Metrics", "mice", "multcomp", "openssl", "PKI", "pryr", "purrr", "quantmod", "quantreg", "RcppEigen", "recipes", "reticulate", "rFerns", "rlang", "rmarkdown", "robustbase", "RWeka", "RWekajars", "stringi", "tensorflow", "tfruns", "tidyr", "tidyselect", "tidyverse", "timeDate", "withr"))
install.packages(c("arules", "broom", "car", "checkmate", "cowplot", "curl", "data.table", "debugme", "deepboost", "dendextend", "devtools", "FactoMineR", "ggpubr", "ggrepel", "git2r", "glue", "gridSVG", "keras", "lazyeval", "lme4", "lubridate", "Matrix", "mda", "Metrics", "mice", "multcomp", "openssl", "PKI", "pryr", "purrr", "quantmod", "quantreg", "RcppEigen", "recipes", "reticulate", "rFerns", "rlang", "rmarkdown", "robustbase", "RWeka", "RWekajars", "stringi", "tensorflow", "tfruns", "tidyr", "tidyselect", "tidyverse", "timeDate", "withr"))
install.packages(c("arules", "broom", "car", "checkmate", "cowplot", "curl", "data.table", "debugme", "deepboost", "dendextend", "devtools", "FactoMineR", "ggpubr", "ggrepel", "git2r", "glue", "gridSVG", "keras", "lazyeval", "lme4", "lubridate", "Matrix", "mda", "Metrics", "mice", "multcomp", "openssl", "PKI", "pryr", "purrr", "quantmod", "quantreg", "RcppEigen", "recipes", "reticulate", "rFerns", "rlang", "rmarkdown", "robustbase", "RWeka", "RWekajars", "stringi", "tensorflow", "tfruns", "tidyr", "tidyselect", "tidyverse", "timeDate", "withr"))
install.packages(c("arules", "broom", "car", "checkmate", "cowplot", "curl", "data.table", "debugme", "deepboost", "dendextend", "devtools", "FactoMineR", "ggpubr", "ggrepel", "git2r", "glue", "gridSVG", "keras", "lazyeval", "lme4", "lubridate", "Matrix", "mda", "Metrics", "mice", "multcomp", "openssl", "PKI", "pryr", "purrr", "quantmod", "quantreg", "RcppEigen", "recipes", "reticulate", "rFerns", "rlang", "rmarkdown", "robustbase", "RWeka", "RWekajars", "stringi", "tensorflow", "tfruns", "tidyr", "tidyselect", "tidyverse", "timeDate", "withr"))
install.packages(c("arules", "broom", "car", "checkmate", "cowplot", "curl", "data.table", "debugme", "deepboost", "dendextend", "devtools", "FactoMineR", "ggpubr", "ggrepel", "git2r", "glue", "gridSVG", "keras", "lazyeval", "lme4", "lubridate", "Matrix", "mda", "Metrics", "mice", "multcomp", "openssl", "PKI", "pryr", "purrr", "quantmod", "quantreg", "RcppEigen", "recipes", "reticulate", "rFerns", "rlang", "rmarkdown", "robustbase", "RWeka", "RWekajars", "stringi", "tensorflow", "tfruns", "tidyr", "tidyselect", "tidyverse", "timeDate", "withr"))
install.packages(c("arules", "broom", "car", "checkmate", "cowplot", "curl", "data.table", "debugme", "deepboost", "dendextend", "devtools", "FactoMineR", "ggpubr", "ggrepel", "git2r", "glue", "gridSVG", "keras", "lazyeval", "lme4", "lubridate", "Matrix", "mda", "Metrics", "mice", "multcomp", "openssl", "PKI", "pryr", "purrr", "quantmod", "quantreg", "RcppEigen", "recipes", "reticulate", "rFerns", "rlang", "rmarkdown", "robustbase", "RWeka", "RWekajars", "stringi", "tensorflow", "tfruns", "tidyr", "tidyselect", "tidyverse", "timeDate", "withr"))
install.packages(c("arules", "broom", "car", "checkmate", "cowplot", "curl", "data.table", "debugme", "deepboost", "dendextend", "devtools", "FactoMineR", "ggpubr", "ggrepel", "git2r", "glue", "gridSVG", "keras", "lazyeval", "lme4", "lubridate", "Matrix", "mda", "Metrics", "mice", "multcomp", "openssl", "PKI", "pryr", "purrr", "quantmod", "quantreg", "RcppEigen", "recipes", "reticulate", "rFerns", "rlang", "rmarkdown", "robustbase", "RWeka", "RWekajars", "stringi", "tensorflow", "tfruns", "tidyr", "tidyselect", "tidyverse", "timeDate", "withr"))
remove.packages("FSelector")
library(FSelector)
install.packages("FSelector")
library(caret)
library(bclust)
library(FSelector)
install.packages("FSelector")
library(FSelector)
install.packages("FSelector")
install.packages("plotROC")
library(caret)
library(ggplot2)
library(plotROC)
library(pROC)
library(ROCR)
library(doMC)
registerDoMC(cores = 2)
setwd("/media/oscar/DATA/OneDrive - Universidad de Córdoba/workspace/IMIBIC/datasets/enfermedades-autoinmunes/v4/with0s/")
threshold <- 0.95
plotROC <- FALSE
output <- "results/LinfoTrombosis-preproc/"
#load the dataset and ranking of features
dataset <- read.csv("LinfoTrombosis-preproc.csv")
rankingFeature <- read.csv("LinfoTrombosis-preproc-sortedfeatures.csv", sep = "\t")
nFeatures <- nrow(rankingFeature)
classIndex <- ncol(dataset)
set.seed(123)
form <- as.formula(paste(colnames(dataset)[ncol(dataset)]," ~ ."))
fitControl <- trainControl(method="repeatedcv", number = 10,
repeats = 3, classProbs = TRUE,
savePredictions = TRUE, allowParallel= TRUE,
summaryFunction = twoClassSummary, verboseIter = FALSE)
#The dataframe where we stored the results for this algorithm
df <- data.frame(ID = c(0), NumberAtts=c(0), Atts=c(" "), metricOpt=c(0))
df <- df[-1,]
fileName <- paste(output,"LogisticRegression.csv")
#Execute the search by ranking of features
#######################
#All features will be considered as pivot one time
for(feature in 1:nFeatures){
pivotFeature <- rankingFeature[feature,"Index"]
listFeatures <- c(pivotFeature)
aucGlobal <- -1
for(otherFeature in feature:nFeatures)
{
# The last case
if(otherFeature != feature)
{
listFeatures <- c(listFeatures, rankingFeature[otherFeature,"Index"])
}
#extract the subset
subdataset <- dataset[, c(listFeatures, classIndex)]
#pass this subdataset to the classification algorithm
modelFit <- train(form, data = subdataset,
method="glm",
metric = "ROC",
maximize = TRUE,
trControl = fitControl, family="binomial")
auc <- modelFit$results[1, "ROC"]
#register the model
if(auc>= threshold){
vars <- predictors(modelFit)
df <- rbind(df, data.frame(ID = nrow(df) + 1, NumberAtts= length(vars), Atts= paste(vars, collapse = ' '), metricOpt=auc))
#Saving the model for graphing plots a posteriory if it is necessary
saveRDS(modelFit, paste(output,"modelfit-LogisticRegression","-", nrow(df),".rds", sep = ""))
#######################To generate the ROC curve of the best model.
if(plotROC){
g <- ggplot(modelFit$pred, aes(m = S, d=factor(obs, levels = c("S", "N")))) +
geom_roc(n.cuts=0) + coord_equal() + style_roc()
g + annotate("text", x=0.85, y=0.15, label=paste("AUC =", modelFit$results[1,"ROC"]))
ggsave(width = 8, height = 5, filename = paste(output,"modelfit-LogisticRegression","-", nrow(df),".png",sep = ""), bg = "transparent")
}
}
if(aucGlobal < auc){
aucGlobal <- auc
}
else{
#remove the last feature added. due to did not apport any advantage
listFeatures <- listFeatures[1:(length(listFeatures)-1)]
}
}
}
library(caret)
library(ggplot2)
library(plotROC)
library(pROC)
library(ROCR)
library(doMC)
registerDoMC(cores = 2)
setwd("/media/oscar/DATA/OneDrive - Universidad de Córdoba/workspace/IMIBIC/datasets/enfermedades-autoinmunes/v4/with0s/")
threshold <- 0.9
plotROC <- TRUE
output <- "results/LinfoTrombosis-preproc/"
#load the dataset and ranking of features
dataset <- read.csv("LinfoTrombosis-preproc.csv")
rankingFeature <- read.csv("LinfoTrombosis-preproc-sortedfeatures.csv", sep = "\t")
nFeatures <- nrow(rankingFeature)
classIndex <- ncol(dataset)
set.seed(123)
form <- as.formula(paste(colnames(dataset)[ncol(dataset)]," ~ ."))
fitControl <- trainControl(method="repeatedcv", number = 10,
repeats = 3, classProbs = TRUE,
savePredictions = TRUE, allowParallel= TRUE,
summaryFunction = twoClassSummary, verboseIter = FALSE)
#The dataframe where we stored the results for this algorithm
df <- data.frame(ID = c(0), NumberAtts=c(0), Atts=c(" "), metricOpt=c(0))
df <- df[-1,]
fileName <- paste(output,"LogisticRegression.csv")
#Execute the search by ranking of features
#######################
#All features will be considered as pivot one time
for(feature in 1:nFeatures){
pivotFeature <- rankingFeature[feature,"Index"]
listFeatures <- c(pivotFeature)
aucGlobal <- -1
for(otherFeature in feature:nFeatures)
{
# The last case
if(otherFeature != feature)
{
listFeatures <- c(listFeatures, rankingFeature[otherFeature,"Index"])
}
#extract the subset
subdataset <- dataset[, c(listFeatures, classIndex)]
#pass this subdataset to the classification algorithm
modelFit <- train(form, data = subdataset,
method="glm",
metric = "ROC",
maximize = TRUE,
trControl = fitControl, family="binomial")
auc <- modelFit$results[1, "ROC"]
#register the model
if(auc>= threshold){
vars <- predictors(modelFit)
df <- rbind(df, data.frame(ID = nrow(df) + 1, NumberAtts= length(vars), Atts= paste(vars, collapse = ' '), metricOpt=auc))
#Saving the model for graphing plots a posteriory if it is necessary
saveRDS(modelFit, paste(output,"modelfit-LogisticRegression","-", nrow(df),".rds", sep = ""))
#######################To generate the ROC curve of the best model.
if(plotROC){
g <- ggplot(modelFit$pred, aes(m = S, d=factor(obs, levels = c("S", "N")))) +
geom_roc(n.cuts=0) + coord_equal() + style_roc()
g + annotate("text", x=0.85, y=0.15, label=paste("AUC =", modelFit$results[1,"ROC"]))
ggsave(width = 8, height = 5, filename = paste(output,"modelfit-LogisticRegression","-", nrow(df),".png",sep = ""), bg = "transparent")
}
}
if(aucGlobal < auc){
aucGlobal <- auc
}
else{
#remove the last feature added. due to did not apport any advantage
listFeatures <- listFeatures[1:(length(listFeatures)-1)]
}
}
}
#######################End of search by ranking
#order the rows of the dataframe
df <- df[ order(-df[,ncol(df)]), ]
#save the dataframe
write.table(df, file= fileName, quote = FALSE, sep="," , row.names = FALSE,
col.names = TRUE)
debugSource('/media/oscar/DATA/OneDrive - Universidad de Córdoba/workspace/IMIBIC/datasets/enfermedades-autoinmunes/v4/SearchBasedRankingFeatures-LogisticRegression.R')
modelFit$results
df
paste(output,"modelfit-LogisticRegression","-", nrow(df),".png",sep = "")
paste(output,"modelfit-LogisticRegression","-", nrow(df),".png",sep = "")
library(caret)
library(ggplot2)
library(plotROC)
library(pROC)
library(ROCR)
library(doMC)
registerDoMC(cores = 2)
setwd("/media/oscar/DATA/OneDrive - Universidad de Córdoba/workspace/IMIBIC/datasets/enfermedades-autoinmunes/v4/with0s/")
threshold <- 0.9
plotROC <- TRUE
output <- "results/LinfoTrombosis-preproc/"
#load the dataset and ranking of features
dataset <- read.csv("LinfoTrombosis-preproc.csv")
rankingFeature <- read.csv("LinfoTrombosis-preproc-sortedfeatures.csv", sep = "\t")
nFeatures <- nrow(rankingFeature)
classIndex <- ncol(dataset)
set.seed(123)
form <- as.formula(paste(colnames(dataset)[ncol(dataset)]," ~ ."))
fitControl <- trainControl(method="repeatedcv", number = 10,
repeats = 3, classProbs = TRUE,
savePredictions = TRUE, allowParallel= TRUE,
summaryFunction = twoClassSummary, verboseIter = FALSE)
#The dataframe where we stored the results for this algorithm
df <- data.frame(ID = c(0), NumberAtts=c(0), Atts=c(" "), metricOpt=c(0))
df <- df[-1,]
fileName <- paste(output,"LogisticRegression.csv")
#Execute the search by ranking of features
#######################
#All features will be considered as pivot one time
for(feature in 1:nFeatures){
pivotFeature <- rankingFeature[feature,"Index"]
listFeatures <- c(pivotFeature)
aucGlobal <- -1
for(otherFeature in feature:nFeatures)
{
# The last case
if(otherFeature != feature)
{
listFeatures <- c(listFeatures, rankingFeature[otherFeature,"Index"])
}
#extract the subset
subdataset <- dataset[, c(listFeatures, classIndex)]
#pass this subdataset to the classification algorithm
modelFit <- train(form, data = subdataset,
method="glm",
metric = "ROC",
maximize = TRUE,
trControl = fitControl, family="binomial")
auc <- modelFit$results[1, "ROC"]
#register the model
if(auc>= threshold){
vars <- predictors(modelFit)
df <- rbind(df, data.frame(ID = nrow(df) + 1, NumberAtts= length(vars), Atts= paste(vars, collapse = ' '), metricOpt=auc))
#Saving the model for graphing plots a posteriory if it is necessary
saveRDS(modelFit, paste(output,"modelfit-LogisticRegression","-", nrow(df),".rds", sep = ""))
#######################To generate the ROC curve of the best model.
if(plotROC){
g <- ggplot(modelFit$pred, aes(m = S, d=factor(obs, levels = c("S", "N")))) +
geom_roc(n.cuts=0) + coord_equal() + style_roc()
g + annotate("text", x=0.85, y=0.15, label=paste("AUC =", modelFit$results[1,"ROC"]))
ggsave(width = 8, height = 5, filename = paste(output,"modelfit-LogisticRegression","-", nrow(df),".png",sep = ""))
}
}
if(aucGlobal < auc){
aucGlobal <- auc
}
else{
#remove the last feature added. due to did not apport any advantage
listFeatures <- listFeatures[1:(length(listFeatures)-1)]
}
}
}
#######################End of search by ranking
#order the rows of the dataframe
df <- df[ order(-df[,ncol(df)]), ]
#save the dataframe
write.table(df, file= fileName, quote = FALSE, sep="," , row.names = FALSE,
col.names = TRUE)
subdataset
levels(subdataset[,ncol(subdataset)])
library(caret)
library(ggplot2)
library(plotROC)
library(pROC)
library(ROCR)
library(doMC)
registerDoMC(cores = 2)
setwd("/media/oscar/DATA/OneDrive - Universidad de Córdoba/workspace/IMIBIC/datasets/enfermedades-autoinmunes/v4/with0s/")
threshold <- 0.9
plotROC <- TRUE
output <- "results/LinfoTrombosis-preproc/"
#load the dataset and ranking of features
dataset <- read.csv("LinfoTrombosis-preproc.csv")
rankingFeature <- read.csv("LinfoTrombosis-preproc-sortedfeatures.csv", sep = "\t")
nFeatures <- nrow(rankingFeature)
classIndex <- ncol(dataset)
set.seed(123)
form <- as.formula(paste(colnames(dataset)[ncol(dataset)]," ~ ."))
fitControl <- trainControl(method="repeatedcv", number = 10,
repeats = 3, classProbs = TRUE,
savePredictions = TRUE, allowParallel= TRUE,
summaryFunction = twoClassSummary, verboseIter = FALSE)
#The dataframe where we stored the results for this algorithm
df <- data.frame(ID = c(0), NumberAtts=c(0), Atts=c(" "), metricOpt=c(0))
df <- df[-1,]
fileName <- paste(output,"LogisticRegression.csv")
#Execute the search by ranking of features
#######################
#All features will be considered as pivot one time
for(feature in 1:nFeatures){
pivotFeature <- rankingFeature[feature,"Index"]
listFeatures <- c(pivotFeature)
aucGlobal <- -1
for(otherFeature in feature:nFeatures)
{
# The last case
if(otherFeature != feature)
{
listFeatures <- c(listFeatures, rankingFeature[otherFeature,"Index"])
}
#extract the subset
subdataset <- dataset[, c(listFeatures, classIndex)]
#pass this subdataset to the classification algorithm
modelFit <- train(form, data = subdataset,
method="glm",
metric = "ROC",
maximize = TRUE,
trControl = fitControl, family="binomial")
auc <- modelFit$results[1, "ROC"]
#register the model
if(auc>= threshold){
vars <- predictors(modelFit)
df <- rbind(df, data.frame(ID = nrow(df) + 1, NumberAtts= length(vars), Atts= paste(vars, collapse = ' '), metricOpt=auc))
#Saving the model for graphing plots a posteriory if it is necessary
saveRDS(modelFit, paste(output,"modelfit-LogisticRegression","-", nrow(df),".rds", sep = ""))
#######################To generate the ROC curve of the best model.
if(plotROC){
g <- ggplot(modelFit$pred, aes(m = Si, d=factor(obs, levels = c("Si", "No")))) +
geom_roc(n.cuts=0) + coord_equal() + style_roc()
g + annotate("text", x=0.85, y=0.15, label=paste("AUC =", modelFit$results[1,"ROC"]))
ggsave(width = 8, height = 5, filename = paste(output,"modelfit-LogisticRegression","-", nrow(df),".png",sep = ""), bg = "transparent")
}
}
if(aucGlobal < auc){
aucGlobal <- auc
}
else{
#remove the last feature added. due to did not apport any advantage
listFeatures <- listFeatures[1:(length(listFeatures)-1)]
}
}
}
setwd("/media/oscar/DATA/OneDrive - Universidad de Córdoba/workspace/IMIBIC/datasets/enfermedades-autoinmunes/v4/with0s/")
dataset <- read.csv("LinfoTrombosis-preprocv2.csv)
x
wedfsgd
setwd("/media/oscar/DATA/OneDrive - Universidad de Córdoba/workspace/IMIBIC/datasets/enfermedades-autoinmunes/v4/with0s/")
dataset <- read.csv("LinfoTrombosis-preprocv2.csv)
setwd("/media/oscar/DATA/OneDrive - Universidad de Córdoba/workspace/IMIBIC/datasets/enfermedades-autoinmunes/v4/with0s/")
dataset <- read.csv("LinfoTrombosis-preprocv2.csv")
View(dataset)
setwd("/media/oscar/DATA/OneDrive - Universidad de Córdoba/workspace/IMIBIC/datasets/enfermedades-autoinmunes/v4/with0s/")
dataset <- read.csv("MonoAnt-preprocv2.csv")
View(dataset)
levels(dataset[, ncol(dataset)]) <- c(dataset[, ncol(dataset)],"S","N")
levels(dataset[, ncol(dataset)])
levels(dataset[, ncol(dataset)])
dataset[, ncol(dataset)]
dataset
dataset
print(dataset)
print(dataset)
