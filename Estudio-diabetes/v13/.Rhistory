library(caret)
fileT <- "0h.csv"
dataset <- read.csv(fileT, na.strings = "", row.names = 1)
View(dataset)
?preProcess
library(caret)
fileT <- "0h.csv"
dataset <- read.csv(fileT, na.strings = "", row.names = 1)
methods <- c("zv", "nzv", "center","scale","YeoJohnson", "bagImpute")
preProcValues <- preProcess(dataset, method = methods)
datasetTransformed <- predict(preProcValues, dataset)
View(datasetTransformed)
datasetTransformed <- datasetTransformed[!duplicated(datasetTransformed[,1:(ncol(datasetTransformed)-1)]),]
write.table(datasetTransformed, file= paste(fileT, "-preproc.csv",sep = ""),
quote = FALSE, sep="," , row.names = TRUE, col.names = TRUE, na = "")
library(caret)
fileT <- "4h"
dataset <- read.csv(paste0(fileT, ".csv"), na.strings = "", row.names = 1)
methods <- c("zv", "nzv", "center","scale","YeoJohnson", "bagImpute")
preProcValues <- preProcess(dataset, method = methods)
datasetTransformed <- predict(preProcValues, dataset)
datasetTransformed <- datasetTransformed[!duplicated(datasetTransformed[,1:(ncol(datasetTransformed)-1)]),]
write.table(datasetTransformed, file= paste(fileT, "-preproc.csv",sep = ""),
quote = FALSE, sep="," , row.names = TRUE, col.names = TRUE, na = "")
View(datasetTransformed)
library(caret)
file0 <- "0h"
file1 <- "4h"
dataset0 <- read.csv(paste0(file0, ".csv"), na.strings = "", row.names = 1)
dataset1 <- read.csv(paste0(file1, ".csv"), na.strings = "", row.names = 1)
?merge
mergedDataset <- merge(dataset0, dataset1, by = "row.names")
View(mergedDataset)
rownames(dataset1) %in% rownames(dataset0)
sum(rownames(dataset1) %in% rownames(dataset0))
sum(rownames(dataset0) %in% rownames(dataset1))
mergedDataset <- merge(dataset0, dataset1, by = "row.names", sort = T)
View(mergedDataset)
class(mergedDataset$Row.names)
mergedDataset[order(mergedDataset$Row.names),]
mergedDataset$Row.names
as.integer(mergedDataset$Row.names)
mergedDataset$Row.names= as.integer(mergedDataset$Row.names))
mergedDataset$Row.names= as.integer(mergedDataset$Row.names)
mergedDataset[order(mergedDataset$Row.names),]
mergedDataset$Row.names <- as.integer(mergedDataset$Row.names)
order(mergedDataset$Row.names)
mergedDataset[31]
mergedDataset[31,]
library(caret)
file0 <- "0h"
file1 <- "4h"
dataset0 <- read.csv(paste0(file0, ".csv"), na.strings = "", row.names = 1)
dataset1 <- read.csv(paste0(file1, ".csv"), na.strings = "", row.names = 1)
mergedDataset <- merge(dataset0, dataset1, by = "row.names", sort = T)
mergedDataset$Row.names <- as.integer(mergedDataset$Row.names)
mergedDataset <- mergedDataset[order(mergedDataset$Row.names),]
View(mergedDataset)
rownames(mergedDataset) <- mergedDataset$Row.names
View(mergedDataset)
mergedDataset$Row.names <- NULL
View(mergedDataset)
mergedDataset$Diabetes
mergedDataset$Diabetes
mergedDataset$Diabetes
library(caret)
file0 <- "0h"
file1 <- "4h"
dataset0 <- read.csv(paste0(file0, ".csv"), na.strings = "", row.names = 1)
dataset1 <- read.csv(paste0(file1, ".csv"), na.strings = "", row.names = 1)
mergedDataset <- merge(dataset0, dataset1, by = "row.names", sort = T)
mergedDataset$Row.names <- as.integer(mergedDataset$Row.names)
mergedDataset <- mergedDataset[order(mergedDataset$Row.names),]
rownames(mergedDataset) <- mergedDataset$Row.names
mergedDataset$Row.names <- NULL
write.table(datasetTransformed, file= paste(file0, "-", file1, "-preproc.csv",sep = ""),
quote = FALSE, sep="," , row.names = TRUE, col.names = TRUE, na = "")
library(caret)
file0 <- "0h"
file1 <- "4h"
dataset0 <- read.csv(paste0(file0, ".csv"), na.strings = "", row.names = 1)
dataset1 <- read.csv(paste0(file1, ".csv"), na.strings = "", row.names = 1)
mergedDataset <- merge(dataset0, dataset1, by = "row.names", sort = T)
mergedDataset$Row.names <- as.integer(mergedDataset$Row.names)
mergedDataset <- mergedDataset[order(mergedDataset$Row.names),]
rownames(mergedDataset) <- mergedDataset$Row.names
mergedDataset$Row.names <- NULL
write.table(mergedDataset, file= paste(file0, "-", file1, "-preproc.csv",sep = ""),
quote = FALSE, sep="," , row.names = TRUE, col.names = TRUE, na = "")
library(caret)
file0 <- "0h"
file1 <- "4h"
dataset0 <- read.csv(paste0(file0, ".csv"), na.strings = "", row.names = 1)
dataset1 <- read.csv(paste0(file1, ".csv"), na.strings = "", row.names = 1)
mergedDataset <- merge(dataset0, dataset1, by = "row.names", sort = T)
mergedDataset$Row.names <- as.integer(mergedDataset$Row.names)
mergedDataset <- mergedDataset[order(mergedDataset$Row.names),]
rownames(mergedDataset) <- mergedDataset$Row.names
mergedDataset$Row.names <- NULL
write.table(mergedDataset, file= paste(file0, "-", file1, ".csv",sep = ""),
quote = FALSE, sep="," , row.names = TRUE, col.names = TRUE, na = "")
library(caret)
file0 <- "0h"
file1 <- "4h"
dataset0 <- read.csv(paste0(file0, ".csv"), na.strings = "", row.names = 1)
dataset0$Diabetes <- NULL
View(dataset0)
dataset0$Diebetes <- NULL
library(caret)
file0 <- "0h"
file1 <- "4h"
dataset0 <- read.csv(paste0(file0, ".csv"), na.strings = "", row.names = 1)
dataset0$Diebetes <- NULL
dataset1 <- read.csv(paste0(file1, ".csv"), na.strings = "", row.names = 1)
mergedDataset <- merge(dataset0, dataset1, by = "row.names")
mergedDataset$Row.names <- as.integer(mergedDataset$Row.names)
mergedDataset <- mergedDataset[order(mergedDataset$Row.names),]
rownames(mergedDataset) <- mergedDataset$Row.names
mergedDataset$Row.names <- NULL
View(mergedDataset)
library(caret)
file0 <- "0h"
file1 <- "4h"
dataset0 <- read.csv(paste0(file0, ".csv"), na.strings = "", row.names = 1)
dataset0$Diebetes <- NULL
dataset1 <- read.csv(paste0(file1, ".csv"), na.strings = "", row.names = 1)
mergedDataset <- merge(dataset0, dataset1, by = "row.names", sort = F)
View(mergedDataset)
rownames(mergedDataset) <- mergedDataset$Row.names
View(mergedDataset)
mergedDataset$Row.names <- NULL
library(caret)
file0 <- "0h"
file1 <- "4h"
dataset0 <- read.csv(paste0(file0, ".csv"), na.strings = "", row.names = 1)
dataset0$Diebetes <- NULL
dataset1 <- read.csv(paste0(file1, ".csv"), na.strings = "", row.names = 1)
mergedDataset <- merge(dataset0, dataset1, by = "row.names", sort = F)
rownames(mergedDataset) <- mergedDataset$Row.names
mergedDataset$Row.names <- NULL
write.table(mergedDataset, file= paste(file0, "-", file1, ".csv",sep = ""),
quote = FALSE, sep="," , row.names = TRUE, col.names = TRUE, na = "")
library(caret)
fileT <- "0h-4h"
dataset <- read.csv(paste0(fileT, ".csv"), na.strings = "", row.names = 1)
methods <- c("zv", "nzv", "center","scale","YeoJohnson", "bagImpute")
preProcValues <- preProcess(dataset, method = methods)
datasetTransformed <- predict(preProcValues, dataset)
#detecting inconsistent or dupplicated examples
datasetTransformed <- datasetTransformed[!duplicated(datasetTransformed[,1:(ncol(datasetTransformed)-1)]),]
write.table(datasetTransformed, file= paste(fileT, "-preproc.csv",sep = ""),
quote = FALSE, sep="," , row.names = TRUE, col.names = TRUE, na = "")
View(datasetTransformed)
library(ggpubr)
#https://www.r-bloggers.com/add-p-values-and-significance-levels-to-ggplots/
# load the csv
output <- "results/boxplots/"
fileName <- "0h"
outputT <-paste0(output, fileName, "/")
if(!dir.exists(outputT)){
dir.create(outputT, recursive = T)
}
#load the dataset
dataset <-read.csv(paste0(fileName, ".csv"), sep = ",", na.strings = "", row.names = 1)
colnamesT <- colnames(dataset)[-ncol(dataset)]
classes <- levels(dataset[, ncol(dataset)])
colClassName <- colnames(dataset)[ncol(dataset)]
#for each column
for(nameC in colnamesT){
formula <- as.formula(paste0(nameC," ~ Diabetes"))
a<-compare_means(formula, data = dataset)
p <- ggboxplot(dataset, x = "Diabetes", y = nameC,
color = "Diabetes", palette = "jco")
#  Add p-value
p + stat_compare_means()
# To change to t-test
#p + stat_compare_means(method = "t.test")
ggsave(width = 5, height = 5, filename = paste(outputT,nameC,".png",sep = ""), bg = "transparent")
}
View(dataset)
library(ggpubr)
#https://www.r-bloggers.com/add-p-values-and-significance-levels-to-ggplots/
# load the csv
output <- "results/boxplots/"
fileName <- "0h"
outputT <-paste0(output, fileName, "/")
if(!dir.exists(outputT)){
dir.create(outputT, recursive = T)
}
#load the dataset
dataset <-read.csv(paste0(fileName, ".csv"), sep = ",", na.strings = "", row.names = 1)
colnamesT <- colnames(dataset)[-ncol(dataset)]
classes <- levels(dataset[, ncol(dataset)])
colClassName <- colnames(dataset)[ncol(dataset)]
#for each column
for(nameC in colnamesT){
formula <- as.formula(paste0(nameC," ~ Diabetes"))
a<-compare_means(formula, data = dataset)
p <- ggboxplot(dataset, x = "Diabetes", y = nameC,
color = "Diabetes", palette = "jco")
#  Add p-value
p + stat_compare_means()
# To change to t-test
#p + stat_compare_means(method = "t.test")
ggsave(width = 5, height = 5, filename = paste(outputT,nameC,".png",sep = ""), bg = "transparent")
}
library(ggpubr)
#https://www.r-bloggers.com/add-p-values-and-significance-levels-to-ggplots/
# load the csv
output <- "results/boxplots/"
fileName <- "4h"
outputT <-paste0(output, fileName, "/")
if(!dir.exists(outputT)){
dir.create(outputT, recursive = T)
}
#load the dataset
dataset <-read.csv(paste0(fileName, ".csv"), sep = ",", na.strings = "", row.names = 1)
colnamesT <- colnames(dataset)[-ncol(dataset)]
classes <- levels(dataset[, ncol(dataset)])
colClassName <- colnames(dataset)[ncol(dataset)]
#for each column
for(nameC in colnamesT){
formula <- as.formula(paste0(nameC," ~ Diabetes"))
a<-compare_means(formula, data = dataset)
p <- ggboxplot(dataset, x = "Diabetes", y = nameC,
color = "Diabetes", palette = "jco")
#  Add p-value
p + stat_compare_means()
# To change to t-test
#p + stat_compare_means(method = "t.test")
ggsave(width = 5, height = 5, filename = paste(outputT,nameC,".png",sep = ""), bg = "transparent")
}
library(caret)
library(doMC)
registerDoMC(cores = 8)
threshold <- 0.75
output <- "results/"
datasets <- c("0h-preproc", "4h-preproc", "0h-4h-preproc")
algorithms <- c("rf", "glm"
#, "J48"
)
metricOpt <- "ROC"
for(fileName in datasets){
#load the dataset and ranking of features
dataset <-  read.csv(paste(fileName,".csv",sep = ""), sep = ",", row.names = 1)
rankingFeature <- read.csv(paste(output,fileName,"-sortedfeatures.csv", sep = ""), sep = "\t")
nFeatures <- nrow(rankingFeature)
classIndex <- ncol(dataset)
numberClasses <- length(levels(dataset[,ncol(dataset)]))
set.seed(123)
form <- as.formula("Class ~ .")
fitControl <- trainControl(method="repeatedcv", number = 10,
repeats = 3, classProbs = TRUE,
savePredictions = TRUE, allowParallel= TRUE,
summaryFunction = twoClassSummary, verboseIter = FALSE)
#execute the algorithms
for(algorithm in algorithms){
outputTemp <- paste0(output, algorithm, "/", fileName,"/")
if(!dir.exists(outputTemp)){
dir.create(outputTemp, recursive = TRUE)
}
#The dataframe where we stored the results for this algorithm
df <- data.frame(ID = c(0), NumberAtts=c(0), Atts=c(" "), metricOpt=c(0))
df <- df[-1,]
#Execute the search by ranking of features
#######################
#All features will be considered as pivot one time
for(feature in 1:nFeatures){
pivotFeature <- rankingFeature[feature,"Index"]
listFeatures <- c(pivotFeature)
aucGlobal <- -1
for(otherFeature in feature:nFeatures)
{
# The last case
if(otherFeature != feature)
{
listFeatures <- c(listFeatures, rankingFeature[otherFeature,"Index"])
}
#extract the subset
subdataset <- dataset[, c(listFeatures, classIndex)]
#pass this subdataset to the classification algorithm
if(algorithm == "glm"){
modelFit <- train(form, data = subdataset,
method=algorithm,
metric = metricOpt,
maximize = TRUE,
tuneLength = 30,
trControl = fitControl, family="binomial")
}
else{
modelFit <- train(form, data = subdataset,
method=algorithm,
metric = metricOpt,
maximize = TRUE,
tuneLength = 30,
trControl = fitControl)
}
bestTuneIndex <- as.numeric(rownames(modelFit$bestTune)[1])
auc <- modelFit$results[bestTuneIndex, metricOpt]
#register the model
if(auc >= threshold){
vars <- predictors(modelFit)
df <- rbind(df, data.frame(ID = nrow(df) + 1, NumberAtts= length(vars), Atts= paste(vars, collapse = ' '), metricOpt=auc))
#Saving the model for graphing plots a posteriory if it is necessary
if(algorithm=="J48"){
#Cache rJava object classifier in order to save it with the object
.jcache(modelFit$finalModel$classifier)
}
saveRDS(modelFit, paste(outputTemp, "modelfit-",algorithm,"-", nrow(df),".rds", sep = ""))
if(algorithm == "J48"){
pdf(paste0(outputTemp, "tree-", nrow(df),".pdf"), width = 12, height = 8)
plot(modelFit$finalModel)
dev.off()
}
if(algorithm == "rf"){
write(paste0("rf-", nrow(df),";", modelFit$finalModel$ntree), file = paste0(outputTemp, "rf.txt"), append = TRUE)
}
}
if(aucGlobal < auc){
aucGlobal <- auc
}
else{
#remove the last feature added. due to did not apport any advantage
listFeatures <- listFeatures[1:(length(listFeatures)-1)]
}
}
}
#######################End of search by ranking
#order the rows of the dataframe
df <- df[ order(-df[,ncol(df)]), ]
#save the dataframe
write.table(df, file= paste0(outputTemp, algorithm,".csv"), quote = FALSE, sep="," , row.names = FALSE,
col.names = TRUE)
}
}
debugSource('/media/ogreyesp/DATA/workspace/IMIBIC/datasets/diabetes/v13/SearchBasedRankingFeatures.R')
View(rankingFeature)
View(subdataset)
View(subdataset)
