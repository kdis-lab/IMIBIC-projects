# Load the edgeR package and use the utility function, readDGE, to read in the COUNT files created from htseq-count
library(edgeR)
# Load metadata
samples <- read.csv("data/samples-metadata.csv")
View(samples)
View(samples)
counts = readDGE(paste0("data/samples/",samples$LibraryName, "/", samples$LibraryName, ".count"))$counts
noint = rownames(counts) %in% c("no_feature","ambiguous","too_low_aQual", "not_aligned","alignment_not_unique")
noint
cpms = cpm(counts)
cpms
keep = rowSums(cpms > 1) >= 3 & ! noint
keep
counts = counts[keep,]
counts
View(counts)
colnames(counts) = samples$shortname
View(counts)
head(counts[,order(samples$condition)], 5)
# Create a DGEList object (edgeR's container for RNA-seq count data)
d = DGEList(counts = counts, group = samples$condition)
# Estimate normalization factors
d = calcNormFactors(d)
# Inspect the relationships between samples using a multidimensional scaling (MDS) plot
plotMDS(d, labels = samples$shortname, col = c("darkgreen","blue")[factor(samples$condition)])
# Inspect the relationships between samples using a multidimensional scaling (MDS) plot
plotMDS(d, labels = samples$shortname, col = c("darkgreen","blue")[factor(samples$condition)])
# Estimate tagwise dispersion (simple design)
d = estimateCommonDisp(d)
d = estimateTagwiseDisp(d)
# Create a visual representation of the mean-variance relationship using the plotMeanVar and plotBCV functions
plotMeanVar(d, show.tagwise.vars = TRUE, NBline = TRUE)
plotBCV(d)
# Create a visual representation of the mean-variance relationship using the plotMeanVar and plotBCV functions
plotMeanVar(d, show.tagwise.vars = TRUE, NBline = TRUE)
plotBCV(d)
#Test for differential expression ('classic' edgeR)
de = exactTest(d, pair = c("CTL","KD"))
de
de$table
de$table[order(de$table$PValue),]
de$table[-order(de$table$PValue),]
de$table[order(-de$table$PValue),]
de$table[order(de$table$PValue),]
?exactTest
de$genes
de$comparison
topTags(de)
design = model.matrix( ~ LibraryLayout + condition, samples)
design = model.matrix( ~ LibraryLayout + condition, samples)
de
de$table
de$table[order(de$table$PValue),]
#Test for differential expression ('classic' edgeR)
de = exactTest(d, pair = c("CTL","KD"), dispersion = 0.2)
topTags(de)
tt = topTags(de, n = nrow(d))
# Use the topTags function to present a tabular summary of the differential expression statistics
head(tt$table)
# Load the edgeR package and use the utility function, readDGE, to read in the COUNT files created from htseq-count
library(edgeR)
# Load metadata
samples <- read.csv("data/samples-metadata.csv")
counts = readDGE(paste0("data/samples/",samples$LibraryName, "/", samples$LibraryName, ".count"))$counts
noint = rownames(counts) %in% c("no_feature","ambiguous","too_low_aQual", "not_aligned","alignment_not_unique")
cpms = cpm(counts)
keep = rowSums(cpms > 1) >= 3 & ! noint
counts = counts[keep,]
colnames(counts) = samples$shortname
head(counts[,order(samples$condition)], 5)
# Create a DGEList object (edgeR's container for RNA-seq count data)
d = DGEList(counts = counts, group = samples$condition)
# Estimate normalization factors
d = calcNormFactors(d)
# Inspect the relationships between samples using a multidimensional scaling (MDS) plot
plotMDS(d, labels = samples$shortname, col = c("darkgreen","blue")[factor(samples$condition)])
# Estimate tagwise dispersion (simple design)
d = estimateCommonDisp(d)
d = estimateTagwiseDisp(d)
# Create a visual representation of the mean-variance relationship using the plotMeanVar and plotBCV functions
plotMeanVar(d, show.tagwise.vars = TRUE, NBline = TRUE)
plotBCV(d)
#Test for differential expression ('classic' edgeR)
de = exactTest(d, pair = c("CTL","KD"))
tt = topTags(de, n = nrow(d))
# Use the topTags function to present a tabular summary of the differential expression statistics
head(tt$table)
#Test for differential expression ('classic' edgeR)
de = exactTest(d, pair = c("CTL","KD"))
tt = topTags(de, n = nrow(d))
# Use the topTags function to present a tabular summary of the differential expression statistics
head(tt$table)
nc = cpm(d, normalized.lib.sizes = TRUE)
rn = rownames(tt$table)
head(nc[rn,order(samples$condition)],5)
# Create a graphical summary, such as an M (log-fold change) versus A (log-average expression) plot, here showing the
# genes selected as differentially expressed (with a 5% false discovery rate)
deg = rn[tt$table$FDR < .05]
deg
plotSmear(d, de.tags = deg)
#save the top tags
write.csv(tt$table, file = " toptags_edgeR.csv " )
design = model.matrix( ~ LibraryLayout + condition, samples)
# Inspect the relationships between samples using a multidimensional scaling (MDS) plot
plotMDS(d, labels = samples$shortname, col = c("darkgreen","blue")[factor(samples$condition)])
dev.copy(png,'myplot.png')
dev.off()
# Inspect the relationships between samples using a multidimensional scaling (MDS) plot
plotMDS(d, labels = samples$shortname, col = c("darkgreen","blue")[factor(samples$condition)])
dev.copy(png,'myplot.png')
dev.off()
# Inspect the relationships between samples using a multidimensional scaling (MDS) plot
plotMDS(d, labels = samples$shortname, col = c("darkgreen","blue")[factor(samples$condition)])
dev.copy(png,'relationships-between-samples.png')
dev.off()
# Create a visual representation of the mean-variance relationship using the plotMeanVar and plotBCV functions
plotMeanVar(d, show.tagwise.vars = TRUE, NBline = TRUE)
dev.copy(png,'mean-variance relationship-MeanVar.png')
dev.off()
plotBCV(d)
dev.copy(png,'mean-variance relationship-BCV.png')
dev.off()
# Create a graphical summary, such as an M (log-fold change) versus A (log-average expression) plot, here showing the
# genes selected as differentially expressed (with a 5% false discovery rate)
deg = rn[tt$table$FDR < .05]
plotSmear(d, de.tags = deg)
dev.copy(png,'genes differentially expressed.png')
dev.off()
#save the top tags
write.csv(tt$table, file = " toptags_edgeR.csv")
# Load the DESeq package
library(DESeq)
# Load metadata
samples <- read.csv("data/samples-metadata.csv")
# Sigle design
#****************************************
# Create a data.frame with the required metadata
samplesDESeq = with(samples, data.frame(shortname = I(shortname), countf = I(paste0("data/samples/",samples$LibraryName, "/", samples$LibraryName, ".count")),
condition = condition,
LibraryLayout = LibraryLayout))
# Create a CountDataSet object (DESeqâ€™s container for RNA-seq data) from the count tables and corresponding metadata
cds = newCountDataSetFromHTSeqCount(samplesDESeq)
# Estimate normalization factors
cds = estimateSizeFactors(cds)
cds
# Inspect the size factors
sizeFactors(cds)
cdsB = estimateDispersions(cds, method = "blind")
vsd = varianceStabilizingTransformation(cdsB)
p = plotPCA(vsd, intgroup = c("condition", "LibraryLayout"))
p
# Use estimateDispersions to calculate dispersion values
cds = estimateDispersions(cds)
# Inspect the estimated dispersions using the plotDispEsts function
plotDispEsts(cds)
#Perform the test for differential expression by using nbinomTest
res = nbinomTest(cds, "CTL", "KD")
plotMA(res)
# Inspect the result tables of significantly upregulated and downregulated genes, at a 10% false discovery rate (FDR)
resSig = res[which(res$padj < 0.1),]
head(resSig[order(resSig$log2FoldChange, decreasing = TRUE),])
head(resSig[order(resSig$log2FoldChange, decreasing = FALSE),])
table(res$padj < 0.1)
# Create a persistent storage of results using
write.csv(res, file = "res_DESeq.csv")
# Perform a sanity check by inspecting a histogram of unadjusted P values for the differential expression results
hist(res$pval, breaks = 100)
# Step: differential expression analysis
# DESeq and edgeR implement general differential analyses on the basis of the NB model.
# Using edgeR
# Load the edgeR package and use the utility function, readDGE, to read in the COUNT files created from htseq-count
library(edgeR)
output <- "results/edgeR/"
# Load metadata
samples <- read.csv("data/samples-metadata.csv")
# Sigle design
#****************************************
counts = readDGE(paste0("data/samples/",samples$LibraryName, "/", samples$LibraryName, ".count"))$counts
# Filter weakly expressed and noninformative (e.g., non-aligned) features.
# In edgeR, it is recommended to remove features without at least 1 read per million in n of the samples, where n
# is the size of the smallest group of replicates (here, n = 3 for the knockdown group).
noint = rownames(counts) %in% c("no_feature","ambiguous","too_low_aQual", "not_aligned","alignment_not_unique")
cpms = cpm(counts)
keep = rowSums(cpms > 1) >= 3 & ! noint
counts = counts[keep,]
# Visualize and inspect the count table
colnames(counts) = samples$shortname
head(counts[,order(samples$condition)], 5)
# Create a DGEList object (edgeR's container for RNA-seq count data)
d = DGEList(counts = counts, group = samples$condition)
# Estimate normalization factors
d = calcNormFactors(d)
# Inspect the relationships between samples using a multidimensional scaling (MDS) plot
plotMDS(d, labels = samples$shortname, col = c("darkgreen","blue")[factor(samples$condition)])
dev.copy(png, paste0(output, 'relationships-between-samples.png'))
dev.off()
# Estimate tagwise dispersion (simple design)
d = estimateCommonDisp(d)
d = estimateTagwiseDisp(d)
# Create a visual representation of the mean-variance relationship using the plotMeanVar and plotBCV functions
plotMeanVar(d, show.tagwise.vars = TRUE, NBline = TRUE)
dev.copy(png,paste0(output,'mean-variance relationship-MeanVar.png'))
dev.off()
plotBCV(d)
dev.copy(png, paste0(output,'mean-variance relationship-BCV.png'))
dev.off()
#Test for differential expression ('classic' edgeR)
de = exactTest(d, pair = c("CTL","KD"))
tt = topTags(de, n = nrow(d))
# Use the topTags function to present a tabular summary of the differential expression statistics
head(tt$table)
# Inspect the depth-adjusted reads per million for some of the top differentially expressed genes
nc = cpm(d, normalized.lib.sizes = TRUE)
rn = rownames(tt$table)
head(nc[rn,order(samples$condition)],5)
# Create a graphical summary, such as an M (log-fold change) versus A (log-average expression) plot, here showing the
# genes selected as differentially expressed (with a 5% false discovery rate)
deg = rn[tt$table$FDR < .05]
plotSmear(d, de.tags = deg)
dev.copy(png, paste0(output,'genes differentially expressed.png'))
dev.off()
#save the top tags
write.csv(tt$table, file = paste0(output, "toptags_edgeR.csv"))
# Load the DESeq package
library(DESeq)
output <- "results/DESeq/"
# Load metadata
samples <- read.csv("data/samples-metadata.csv")
# Step: differential expression analysis
# DESeq and edgeR implement general differential analyses on the basis of the NB model.
# Using DESeq
# Load the DESeq package
library(DESeq)
output <- "results/DESeq/"
# Load metadata
samples <- read.csv("data/samples-metadata.csv")
# Sigle design
#****************************************
# Create a data.frame with the required metadata
samplesDESeq = with(samples, data.frame(shortname = I(shortname), countf = I(paste0("data/samples/",samples$LibraryName, "/", samples$LibraryName, ".count")),
condition = condition,
LibraryLayout = LibraryLayout))
# Create a CountDataSet object (DESeqâ€™s container for RNA-seq data) from the count tables and corresponding metadata
cds = newCountDataSetFromHTSeqCount(samplesDESeq)
# Estimate normalization factors
cds = estimateSizeFactors(cds)
# Inspect the size factors
sizeFactors(cds)
# To inspect sample relationships, invoke a variance-stabilizing transformation and inspect a principal component
# analysis (PCA) plot
cdsB = estimateDispersions(cds, method = "blind")
vsd = varianceStabilizingTransformation(cdsB)
plotPCA(vsd, intgroup = c("condition", "LibraryLayout"))
dev.copy(png, paste0(output, 'relationships-between-samples.png'))
dev.off()
# Use estimateDispersions to calculate dispersion values
cds = estimateDispersions(cds)
# Inspect the estimated dispersions using the plotDispEsts function
plotDispEsts(cds)
dev.copy(png, paste0(output, 'estimate dispersion.png'))
dev.off()
#Perform the test for differential expression by using nbinomTest
res = nbinomTest(cds, "CTL", "KD")
# Step: differential expression analysis
# DESeq and edgeR implement general differential analyses on the basis of the NB model.
# Using DESeq
# Load the DESeq package
library(DESeq)
output <- "results/DESeq/"
# Load metadata
samples <- read.csv("data/samples-metadata.csv")
# Sigle design
#****************************************
# Create a data.frame with the required metadata
samplesDESeq = with(samples, data.frame(shortname = I(shortname), countf = I(paste0("data/samples/",samples$LibraryName, "/", samples$LibraryName, ".count")),
condition = condition,
LibraryLayout = LibraryLayout))
# Create a CountDataSet object (DESeqâ€™s container for RNA-seq data) from the count tables and corresponding metadata
cds = newCountDataSetFromHTSeqCount(samplesDESeq)
# Estimate normalization factors
cds = estimateSizeFactors(cds)
# Inspect the size factors
sizeFactors(cds)
# To inspect sample relationships, invoke a variance-stabilizing transformation and inspect a principal component
# analysis (PCA) plot
cdsB = estimateDispersions(cds, method = "blind")
vsd = varianceStabilizingTransformation(cdsB)
plotPCA(vsd, intgroup = c("condition", "LibraryLayout"))
dev.copy(png, paste0(output, 'relationships-between-samples.png'))
dev.off()
# Use estimateDispersions to calculate dispersion values
cds = estimateDispersions(cds)
# Inspect the estimated dispersions using the plotDispEsts function
plotDispEsts(cds)
dev.copy(png, paste0(output, 'estimate dispersion.png'))
dev.off()
#Perform the test for differential expression by using nbinomTest
res = nbinomTest(cds, "CTL", "KD")
# Given the table of differential expression results, use plotMA to display differential expression (log-fold changes)
# versus expression strength (log-average read count)
plotMA(res)
dev.copy(png, paste0(output, 'differential expression.png'))
dev.off()
# Inspect the result tables of significantly upregulated and downregulated genes, at a 10% false discovery rate (FDR)
resSig = res[which(res$padj < 0.1),]
head(resSig[order(resSig$log2FoldChange, decreasing = TRUE),])
head(resSig[order(resSig$log2FoldChange, decreasing = FALSE),])
# Count the number of genes with significant differential expression at a FDR of 10%
table(res$padj < 0.1)
# Create a persistent storage of results using
write.csv(res, file = paste0(output, "res_DESeq.csv"))
# Perform a sanity check by inspecting a histogram of unadjusted P values for the differential expression results
hist(res$pval, breaks = 100)
dev.copy(png, paste0(output, 'unadjusted-p-value-histogram.png'))
dev.off()
library(caret)
library(pROC)
library(doMC)
registerDoMC(cores = 2)
output <- "results/"
fileNames <- c("Year1vsRest-0h-4h")
algorithmNames <-c("glm", "rf")
fitControl <- trainControl(method="repeatedcv", number = 10, repeats = 3, classProbs = TRUE,
savePredictions = TRUE, allowParallel= TRUE,
summaryFunction = twoClassSummary, verboseIter = FALSE)
form <- as.formula("Class ~ .")
# Seed for reproducibility
set.seed(123)
for(fileName in fileNames){
dataset <- read.csv(paste(fileName,".csv", sep = ""), sep = ",", row.names = 1)
for(alg in algorithmNames){
outputT <- paste0(output, alg,"/")
if(!dir.exists(outputT)){
dir.create(outputT, recursive = T)
}
if(alg=="glm"){
modelFit <- train(form, data = dataset,
method="glm",
metric = "ROC",
maximize = TRUE,
trControl = fitControl, family="binomial")
}
if(alg=="rf"){
modelFit <- train(form, data = dataset,
method="rf",
metric = "ROC",
maximize = TRUE,
trControl = fitControl,
tuneLength = 30)
}
plsProbs <- predict(modelFit, newdata = dataset, type = "prob") # Predict over the same training data
rocT <- roc(dataset$Class, plsProbs$S) # Draw ROC curve.
plot(rocT, print.auc = TRUE)
dev.copy(png, paste(outputT, fileName,'/AUC-TrainingSet.png', sep = ""))
dev.off()
if(alg=="glm"){
predictions <- modelFit$pred
}
if(alg=="rf"){
# Extracting the best tune
predictions <- modelFit$pred[modelFit$pred$mtry == modelFit$bestTune$mtry,]
}
response <- as.numeric(modelFit$trainingData$.outcome=='S')
predictor <- aggregate(S ~ rowIndex, predictions, mean)[,'S']
rocT <- roc(response, predictor)
plot(rocT, print.auc = TRUE)
dev.copy(png, paste(outputT, fileName,'/AUC-CV-FullDataset.png', sep = ""))
dev.off()
# Save the CV residuals
cvResiduals <- data.frame(class=response, prediction=predictor)
#save the dataframe
write.table(cvResiduals, file= paste0(outputT, fileName, "/CV-FullDataset.csv"), quote = FALSE, sep="," , row.names = FALSE,
col.names = TRUE)
}
}
getwd()
setwd("/media/ogreyesp/DATA/workspace/IMIBIC/datasets/diabetes/v10")
library(caret)
library(pROC)
library(doMC)
registerDoMC(cores = 2)
output <- "results/"
fileNames <- c("Year1vsRest-0h-4h")
algorithmNames <-c("glm", "rf")
fitControl <- trainControl(method="repeatedcv", number = 10, repeats = 3, classProbs = TRUE,
savePredictions = TRUE, allowParallel= TRUE,
summaryFunction = twoClassSummary, verboseIter = FALSE)
form <- as.formula("Class ~ .")
# Seed for reproducibility
set.seed(123)
for(fileName in fileNames){
dataset <- read.csv(paste(fileName,".csv", sep = ""), sep = ",", row.names = 1)
for(alg in algorithmNames){
outputT <- paste0(output, alg,"/")
if(!dir.exists(outputT)){
dir.create(outputT, recursive = T)
}
if(alg=="glm"){
modelFit <- train(form, data = dataset,
method="glm",
metric = "ROC",
maximize = TRUE,
trControl = fitControl, family="binomial")
}
if(alg=="rf"){
modelFit <- train(form, data = dataset,
method="rf",
metric = "ROC",
maximize = TRUE,
trControl = fitControl,
tuneLength = 30)
}
plsProbs <- predict(modelFit, newdata = dataset, type = "prob") # Predict over the same training data
rocT <- roc(dataset$Class, plsProbs$S) # Draw ROC curve.
plot(rocT, print.auc = TRUE)
dev.copy(png, paste(outputT, fileName,'/AUC-TrainingSet.png', sep = ""))
dev.off()
if(alg=="glm"){
predictions <- modelFit$pred
}
if(alg=="rf"){
# Extracting the best tune
predictions <- modelFit$pred[modelFit$pred$mtry == modelFit$bestTune$mtry,]
}
response <- as.numeric(modelFit$trainingData$.outcome=='S')
predictor <- aggregate(S ~ rowIndex, predictions, mean)[,'S']
rocT <- roc(response, predictor)
plot(rocT, print.auc = TRUE)
dev.copy(png, paste(outputT, fileName,'/AUC-CV-FullDataset.png', sep = ""))
dev.off()
# Save the CV residuals
cvResiduals <- data.frame(class=response, prediction=predictor)
#save the dataframe
write.table(cvResiduals, file= paste0(outputT, fileName, "/CV-FullDataset.csv"), quote = FALSE, sep="," , row.names = FALSE,
col.names = TRUE)
}
}
library(caret)
library(pROC)
alg <- "rf"
path <- "/media/ogreyesp/DATA/workspace/IMIBIC/datasets/diabetes/v10/results/rf/Year1vsRest-0h"
modelName <- "modelfit-rf-13"
modelFit <- readRDS(paste0(path, modelName, ".rds"))
path <- "/media/ogreyesp/DATA/workspace/IMIBIC/datasets/diabetes/v10/results/rf/Year1vsRest-0h/"
modelName <- "modelfit-rf-13"
modelFit <- readRDS(paste0(path, modelName, ".rds"))
if(alg =="glm"){
predictions <- modelFit$pred
}
if(alg =="rf"){
# Extracting the best tune
predictions <- modelFit$pred[modelFit$pred$mtry == modelFit$bestTune$mtry,]
}
response <- as.numeric(modelFit$trainingData$.outcome=='S')
predictor <- aggregate(S ~ rowIndex, predictions, mean)[,'S']
# Check if correspond the AUC value
rocT <- roc(response, predictor)
plot(rocT, print.auc = TRUE)
# Save the CV residuals
cvResiduals <- data.frame(class=response,prediction=predictor)
#save the dataframe
write.table(cvResiduals, file= paste0(path, modelName, "CV-residuals.csv"), quote = FALSE, sep="," , row.names = FALSE,
col.names = TRUE)
library(caret)
library(pROC)
alg <- "rf"
path <- "/media/ogreyesp/DATA/workspace/IMIBIC/datasets/diabetes/v10/results/rf/Year1vsRest-4h/"
modelName <- "modelfit-rf-8"
modelFit <- readRDS(paste0(path, modelName, ".rds"))
if(alg =="glm"){
predictions <- modelFit$pred
}
if(alg =="rf"){
# Extracting the best tune
predictions <- modelFit$pred[modelFit$pred$mtry == modelFit$bestTune$mtry,]
}
response <- as.numeric(modelFit$trainingData$.outcome=='S')
predictor <- aggregate(S ~ rowIndex, predictions, mean)[,'S']
# Check if correspond the AUC value
rocT <- roc(response, predictor)
plot(rocT, print.auc = TRUE)
# Save the CV residuals
cvResiduals <- data.frame(class=response,prediction=predictor)
#save the dataframe
write.table(cvResiduals, file= paste0(path, alg, "CV-residuals.csv"), quote = FALSE, sep="," , row.names = FALSE,
col.names = TRUE)
library(caret)
library(pROC)
alg <- "rf"
path <- "/media/ogreyesp/DATA/workspace/IMIBIC/datasets/diabetes/v10/results/rf/Year1vsRest-0h-4h/"
modelName <- "modelfit-rf-61"
modelFit <- readRDS(paste0(path, modelName, ".rds"))
if(alg =="glm"){
predictions <- modelFit$pred
}
if(alg =="rf"){
# Extracting the best tune
predictions <- modelFit$pred[modelFit$pred$mtry == modelFit$bestTune$mtry,]
}
response <- as.numeric(modelFit$trainingData$.outcome=='S')
predictor <- aggregate(S ~ rowIndex, predictions, mean)[,'S']
# Check if correspond the AUC value
rocT <- roc(response, predictor)
plot(rocT, print.auc = TRUE)
# Save the CV residuals
cvResiduals <- data.frame(class=response,prediction=predictor)
#save the dataframe
write.table(cvResiduals, file= paste0(path, alg, "-CV-residuals.csv"), quote = FALSE, sep="," , row.names = FALSE,
col.names = TRUE)
